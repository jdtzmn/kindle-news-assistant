from .namespaces import _base, cc as cc, dc as dc, georss as georss, itunes as itunes, mediarss as mediarss, psc as psc
from .urls import make_safe_absolute_uri as make_safe_absolute_uri, resolve_relative_uris as resolve_relative_uris
from .util import FeedParserDict as FeedParserDict
from typing import Any

class _FeedParserMixin(_base.Namespace, cc.Namespace, dc.Namespace, georss.Namespace, itunes.Namespace, mediarss.Namespace, psc.Namespace):
    namespaces: Any = ...
    can_be_relative_uri: Any = ...
    can_contain_relative_uris: Any = ...
    can_contain_dangerous_markup: Any = ...
    html_types: Any = ...
    feeddata: Any = ...
    entries: Any = ...
    version: str = ...
    namespaces_in_use: Any = ...
    infeed: int = ...
    inentry: int = ...
    incontent: int = ...
    intextinput: int = ...
    inimage: int = ...
    inauthor: int = ...
    incontributor: int = ...
    inpublisher: int = ...
    insource: int = ...
    sourcedata: Any = ...
    contentparams: Any = ...
    namespacemap: Any = ...
    elementstack: Any = ...
    basestack: Any = ...
    langstack: Any = ...
    svgOK: int = ...
    title_depth: int = ...
    depth: int = ...
    property_depth_map: Any = ...
    def __init__(self) -> None: ...
    baseuri: Any = ...
    lang: Any = ...
    def unknown_starttag(self, tag: Any, attrs: Any): ...
    def unknown_endtag(self, tag: Any) -> None: ...
    def handle_charref(self, ref: Any) -> None: ...
    def handle_entityref(self, ref: Any): ...
    def handle_data(self, text: Any, escape: int = ...) -> None: ...
    def handle_comment(self, text: Any) -> None: ...
    def handle_pi(self, text: Any) -> None: ...
    def handle_decl(self, text: Any) -> None: ...
    def parse_declaration(self, i: Any): ...
    @staticmethod
    def map_content_type(content_type: Any): ...
    def track_namespace(self, prefix: Any, uri: Any) -> None: ...
    def resolve_uri(self, uri: Any): ...
    @staticmethod
    def decode_entities(element: Any, data: Any): ...
    @staticmethod
    def strattrs(attrs: Any): ...
    def push(self, element: Any, expecting_text: Any) -> None: ...
    def pop(self, element: Any, strip_whitespace: int = ...): ...
    def push_content(self, tag: Any, attrs_d: Any, default_content_type: Any, expecting_text: Any) -> None: ...
    def pop_content(self, tag: Any): ...
    @staticmethod
    def looks_like_html(s: Any): ...
