from .document import Document as Document
from .exceptions import FolderNotFound as FolderNotFound
from .folder import Folder as Folder
from typing import Any, List, Union

DocumentOrFolder = Union[Document, Folder]

class Collection:
    items: Any = ...
    def __init__(self, *items: List[DocumentOrFolder]) -> None: ...
    def add(self, doc_dict: dict) -> None: ...
    def add_document(self, doc_dict: dict) -> None: ...
    def add_folder(self, dir_dict: dict) -> None: ...
    def parent(self, doc_or_folder: DocumentOrFolder) -> Folder: ...
    def children(self, folder: Folder=...) -> List[DocumentOrFolder]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, position: int) -> DocumentOrFolder: ...
