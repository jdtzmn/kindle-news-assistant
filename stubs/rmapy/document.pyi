from .meta import Meta as Meta
from io import BytesIO
from requests import Response
from typing import Any, List, Optional, Tuple, TypeVar

BytesOrString = TypeVar('BytesOrString', BytesIO, str)

class RmPage:
    page: Any = ...
    metadata: Any = ...
    order: Any = ...
    thumbnail: Any = ...
    ID: Any = ...
    def __init__(self, page: Any, metadata: Optional[Any] = ..., order: int = ..., thumbnail: Optional[Any] = ..., _id: Optional[Any] = ...) -> None: ...

class Document(Meta):
    Type: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class ZipDocument:
    content: Any = ...
    metadata: Any = ...
    pagedata: str = ...
    zipfile: Any = ...
    pdf: Any = ...
    epub: Any = ...
    rm: List[RmPage] = ...
    ID: Any = ...
    def __init__(self, _id: Optional[Any] = ..., doc: Optional[Any] = ..., file: Optional[Any] = ...) -> None: ...
    def create_request(self) -> Tuple[BytesIO, dict]: ...
    def dump(self, file: BytesOrString) -> None: ...
    def load(self, file: BytesOrString) -> None: ...

def from_zip(_id: str, file: str) -> ZipDocument: ...
def from_request_stream(_id: str, stream: Response) -> ZipDocument: ...
