import requests
from .collections import Collection as Collection
from .config import dump as dump, load as load
from .const import BASE_URL as BASE_URL, DEVICE as DEVICE, DEVICE_TOKEN_URL as DEVICE_TOKEN_URL, RFC3339Nano as RFC3339Nano, USER_AGENT as USER_AGENT, USER_TOKEN_URL as USER_TOKEN_URL
from .document import Document as Document, ZipDocument as ZipDocument, from_request_stream as from_request_stream
from .exceptions import ApiError as ApiError, AuthError as AuthError, DocumentNotFound as DocumentNotFound, UnsupportedTypeError as UnsupportedTypeError
from .folder import Folder as Folder
from typing import Any, Optional, Union

log: Any
DocumentOrFolder = Union[Document, Folder]

class Client:
    token_set: Any = ...
    def __init__(self) -> None: ...
    def request(self, method: str, path: str, data: Any=..., body: Any=..., headers: Any=..., params: Any=..., stream: Any=...) -> requests.Response: ...
    def register_device(self, code: str) -> Any: ...
    def renew_token(self): ...
    def is_auth(self) -> bool: ...
    def get_meta_items(self) -> Collection: ...
    def get_doc(self, _id: str) -> Optional[DocumentOrFolder]: ...
    def download(self, document: Document) -> ZipDocument: ...
    def delete(self, doc: DocumentOrFolder) -> Any: ...
    def upload(self, zip_doc: ZipDocument, to: Folder=...) -> Any: ...
    def update_metadata(self, docorfolder: DocumentOrFolder) -> Any: ...
    def get_current_version(self, docorfolder: DocumentOrFolder) -> int: ...
    def create_folder(self, folder: Folder) -> Any: ...
    @staticmethod
    def check_response(response: requests.Response) -> Any: ...
