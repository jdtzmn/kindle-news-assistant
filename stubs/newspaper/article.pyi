from . import images as images, network as network, nlp as nlp, settings as settings, urls as urls
from .cleaners import DocumentCleaner as DocumentCleaner
from .configuration import Configuration as Configuration
from .extractors import ContentExtractor as ContentExtractor
from .outputformatters import OutputFormatter as OutputFormatter
from .utils import RawHelper as RawHelper, URLHelper as URLHelper, extend_config as extend_config, extract_meta_refresh as extract_meta_refresh, get_available_languages as get_available_languages
from .videos.extractors import VideoExtractor as VideoExtractor
from typing import Any, Optional

log: Any

class ArticleDownloadState:
    NOT_STARTED: int = ...
    FAILED_RESPONSE: int = ...
    SUCCESS: int = ...

class ArticleException(Exception): ...

class Article:
    config: Any = ...
    extractor: Any = ...
    source_url: Any = ...
    url: Any = ...
    title: Any = ...
    top_img: str = ...
    meta_img: str = ...
    imgs: Any = ...
    movies: Any = ...
    text: str = ...
    keywords: Any = ...
    meta_keywords: Any = ...
    tags: Any = ...
    authors: Any = ...
    publish_date: str = ...
    summary: str = ...
    html: str = ...
    article_html: str = ...
    is_parsed: bool = ...
    download_state: Any = ...
    download_exception_msg: Any = ...
    meta_description: str = ...
    meta_lang: str = ...
    meta_favicon: str = ...
    meta_data: Any = ...
    canonical_link: str = ...
    top_node: Any = ...
    clean_top_node: Any = ...
    doc: Any = ...
    clean_doc: Any = ...
    additional_data: Any = ...
    def __init__(self, url: Any, title: str = ..., source_url: str = ..., config: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def build(self) -> None: ...
    def download(self, input_html: Optional[Any] = ..., title: Optional[Any] = ..., recursion_counter: int = ...): ...
    link_hash: Any = ...
    def parse(self) -> None: ...
    def fetch_images(self) -> None: ...
    def has_top_image(self): ...
    def is_valid_url(self): ...
    def is_valid_body(self): ...
    def is_media_news(self): ...
    def nlp(self) -> None: ...
    def get_parse_candidate(self): ...
    def build_resource_path(self) -> None: ...
    def get_resource_path(self): ...
    def release_resources(self) -> None: ...
    def set_reddit_top_img(self) -> None: ...
    def set_title(self, input_title: Any) -> None: ...
    def set_text(self, text: Any) -> None: ...
    def set_html(self, html: Any) -> None: ...
    def set_article_html(self, article_html: Any) -> None: ...
    def set_meta_img(self, src_url: Any) -> None: ...
    def set_top_img(self, src_url: Any) -> None: ...
    top_image: Any = ...
    def set_top_img_no_check(self, src_url: Any) -> None: ...
    images: Any = ...
    def set_imgs(self, imgs: Any) -> None: ...
    def set_keywords(self, keywords: Any) -> None: ...
    def set_authors(self, authors: Any) -> None: ...
    def set_summary(self, summary: Any) -> None: ...
    def set_meta_language(self, meta_lang: Any) -> None: ...
    def set_meta_keywords(self, meta_keywords: Any) -> None: ...
    def set_meta_favicon(self, meta_favicon: Any) -> None: ...
    def set_meta_description(self, meta_description: Any) -> None: ...
    def set_meta_data(self, meta_data: Any) -> None: ...
    def set_canonical_link(self, canonical_link: Any) -> None: ...
    def set_tags(self, tags: Any) -> None: ...
    def set_movies(self, movie_objects: Any) -> None: ...
    def throw_if_not_downloaded_verbose(self) -> None: ...
    def throw_if_not_parsed_verbose(self) -> None: ...
