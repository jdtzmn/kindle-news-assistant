from . import settings as settings
from typing import Any, Optional

log: Any

class FileHelper:
    @staticmethod
    def loadResourceFile(filename: Any): ...

class ParsingCandidate:
    url: Any = ...
    link_hash: Any = ...
    def __init__(self, url: Any, link_hash: Any) -> None: ...

class RawHelper:
    @staticmethod
    def get_parsing_candidate(url: Any, raw_html: Any): ...

class URLHelper:
    @staticmethod
    def get_parsing_candidate(url_to_crawl: Any): ...

class StringSplitter:
    pattern: Any = ...
    def __init__(self, pattern: Any) -> None: ...
    def split(self, string: Any): ...

class StringReplacement:
    pattern: Any = ...
    replaceWith: Any = ...
    def __init__(self, pattern: Any, replaceWith: Any) -> None: ...
    def replaceAll(self, string: Any): ...

class ReplaceSequence:
    replacements: Any = ...
    def __init__(self) -> None: ...
    def create(self, firstPattern: Any, replaceWith: Optional[Any] = ...): ...
    def append(self, pattern: Any, replaceWith: Optional[Any] = ...): ...
    def replaceAll(self, string: Any): ...

class TimeoutError(Exception): ...

def timelimit(timeout: Any): ...
def domain_to_filename(domain: Any): ...
def filename_to_domain(filename: Any): ...
def is_ascii(word: Any): ...
def extract_meta_refresh(html: Any): ...
def to_valid_filename(s: Any): ...
def cache_disk(seconds: Any = ..., cache_folder: str = ...): ...
def print_duration(method: Any): ...
def chunks(l: Any, n: Any) -> None: ...
def purge(fn: Any, pattern: Any) -> None: ...
def clear_memo_cache(source: Any) -> None: ...
def memoize_articles(source: Any, articles: Any): ...
def get_useragent(): ...
def get_available_languages(): ...
def print_available_languages() -> None: ...
def extend_config(config: Any, config_items: Any): ...
