from . import network as network, urls as urls, utils as utils
from .article import Article as Article
from .configuration import Configuration as Configuration
from .extractors import ContentExtractor as ContentExtractor
from .settings import ANCHOR_DIRECTORY as ANCHOR_DIRECTORY
from typing import Any, Optional

log: Any

class Category:
    url: Any = ...
    html: Any = ...
    doc: Any = ...
    def __init__(self, url: Any) -> None: ...

class Feed:
    url: Any = ...
    rss: Any = ...
    def __init__(self, url: Any) -> None: ...

NUM_THREADS_PER_SOURCE_WARN_LIMIT: int

class Source:
    config: Any = ...
    extractor: Any = ...
    url: Any = ...
    domain: Any = ...
    scheme: Any = ...
    categories: Any = ...
    feeds: Any = ...
    articles: Any = ...
    html: str = ...
    doc: Any = ...
    logo_url: str = ...
    favicon: str = ...
    brand: Any = ...
    description: str = ...
    is_parsed: bool = ...
    is_downloaded: bool = ...
    def __init__(self, url: Any, config: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def build(self) -> None: ...
    def purge_articles(self, reason: Any, articles: Any): ...
    def set_categories(self) -> None: ...
    def set_feeds(self) -> None: ...
    def set_description(self) -> None: ...
    def download(self) -> None: ...
    def download_categories(self) -> None: ...
    def download_feeds(self) -> None: ...
    def parse(self) -> None: ...
    def parse_categories(self) -> None: ...
    def parse_feeds(self) -> None: ...
    def feeds_to_articles(self): ...
    def categories_to_articles(self): ...
    def generate_articles(self, limit: int = ...) -> None: ...
    def download_articles(self, threads: int = ...) -> None: ...
    def parse_articles(self) -> None: ...
    def size(self): ...
    def clean_memo_cache(self) -> None: ...
    def feed_urls(self): ...
    def category_urls(self): ...
    def article_urls(self): ...
    def print_summary(self) -> None: ...
