from skmultiflow.core import BaseSKMObject as BaseSKMObject, ClassifierMixin as ClassifierMixin
from skmultiflow.utils import check_random_state as check_random_state, get_dimensions as get_dimensions
from typing import Any, Optional

class HalfSpaceTrees(BaseSKMObject, ClassifierMixin):
    window_size: Any = ...
    depth: Any = ...
    n_estimators: Any = ...
    min_values: Any = ...
    max_values: Any = ...
    ensemble: Any = ...
    n_features: int = ...
    size_limit: Any = ...
    samples_seen: int = ...
    anomaly_threshold: Any = ...
    is_learning_phase_on: bool = ...
    random_state: Any = ...
    def __init__(self, window_size: int = ..., depth: int = ..., n_estimators: int = ..., size_limit: int = ..., anomaly_threshold: float = ..., random_state: Optional[Any] = ...) -> None: ...
    def partial_fit(self, X: Any, y: Optional[Any] = ..., classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any): ...
    def initialise_work_space(self) -> None: ...
    def build_trees(self) -> None: ...
    def update_mass(self, X: Any, boolean: Any) -> None: ...
    def update_models(self) -> None: ...
    def set_is_learning_phase_on(self, boolean: Any) -> None: ...

class HalfSpaceTree:
    max_depth: Any = ...
    n_features: Any = ...
    size_limit: Any = ...
    is_learning_phase_on: bool = ...
    random_state: Any = ...
    root: Any = ...
    def __init__(self, max_depth: Any, n_features: Any, size_limit: Any, min_values: Any, max_values: Any, random_state: Optional[Any] = ...) -> None: ...
    def predict_proba(self, X: Any, max_score: Any): ...
    def get_votes_for_instance(self, X: Any, max_score: Any): ...
    def anomaly_score(self, X: Any): ...
    def build_tree(self, min_values: Any, max_values: Any, current_depth: int = ...): ...
    def update_mass(self, X: Any, is_reference_window: Any): ...
    def update_model(self, node: Any) -> None: ...

class HalfSpaceTreeNode:
    left: Any = ...
    right: Any = ...
    left_mass: int = ...
    right_mass: int = ...
    depth: Any = ...
    split_value: Any = ...
    split_attribute: Any = ...
    internal_node: Any = ...
    def __init__(self, left: Optional[Any] = ..., right: Optional[Any] = ..., split_value: float = ..., split_attribute: int = ..., depth: int = ..., internal_node: bool = ...) -> None: ...
