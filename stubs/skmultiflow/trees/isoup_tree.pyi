from skmultiflow.core import MultiOutputMixin as MultiOutputMixin
from skmultiflow.trees import HoeffdingTreeRegressor as HoeffdingTreeRegressor
from skmultiflow.trees.attribute_test import NominalAttributeMultiwayTest as NominalAttributeMultiwayTest
from skmultiflow.trees.nodes import ActiveLearningNode as ActiveLearningNode, ActiveLearningNodeAdaptiveMultiTarget as ActiveLearningNodeAdaptiveMultiTarget, ActiveLearningNodeForRegressionMultiTarget as ActiveLearningNodeForRegressionMultiTarget, ActiveLearningNodePerceptronMultiTarget as ActiveLearningNodePerceptronMultiTarget, InactiveLearningNodeAdaptiveMultiTarget as InactiveLearningNodeAdaptiveMultiTarget, InactiveLearningNodeForRegression as InactiveLearningNodeForRegression, InactiveLearningNodePerceptronMultiTarget as InactiveLearningNodePerceptronMultiTarget, LearningNode as LearningNode, SplitNode as SplitNode
from skmultiflow.trees.split_criterion import IntraClusterVarianceReductionSplitCriterion as IntraClusterVarianceReductionSplitCriterion
from skmultiflow.utils import get_dimensions as get_dimensions
from typing import Any, Optional

def MultiTargetRegressionHoeffdingTree(max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., leaf_prediction: str = ..., no_preprune: bool = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ..., learning_ratio_perceptron: float = ..., learning_ratio_decay: float = ..., learning_ratio_const: bool = ..., random_state: Optional[Any] = ...): ...

class iSOUPTreeRegressor(HoeffdingTreeRegressor, MultiOutputMixin): # type: ignore
    learning_ratio_perceptron: Any = ...
    learning_ratio_decay: Any = ...
    learning_ratio_const: Any = ...
    random_state: Any = ...
    examples_seen: int = ...
    sum_of_values: float = ...
    sum_of_squares: float = ...
    sum_of_attribute_values: float = ...
    sum_of_attribute_squares: float = ...
    def __init__(self, max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., leaf_prediction: str = ..., no_preprune: bool = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ..., learning_ratio_perceptron: float = ..., learning_ratio_decay: float = ..., learning_ratio_const: bool = ..., random_state: Optional[Any] = ...) -> None: ...
    @property
    def leaf_prediction(self): ...
    @leaf_prediction.setter
    def leaf_prediction(self, leaf_prediction: Any) -> None: ...
    @property
    def split_criterion(self): ...
    @split_criterion.setter
    def split_criterion(self, split_criterion: Any) -> None: ...
    def normalize_sample(self, X: Any): ...
    def normalize_target_value(self, y: Any): ...
    def get_weights_for_instance(self, X: Any): ...
    def partial_fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...) -> None: ... # type: ignore
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any) -> None: ...
