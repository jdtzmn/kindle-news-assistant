from skmultiflow.core import BaseSKMObject as BaseSKMObject, ClassifierMixin as ClassifierMixin
from skmultiflow.rules.base_rule import Rule as Rule
from skmultiflow.trees.attribute_test import NominalAttributeMultiwayTest as NominalAttributeMultiwayTest
from skmultiflow.trees.nodes import ActiveLearningNode as ActiveLearningNode, FoundNode as FoundNode, InactiveLearningNode as InactiveLearningNode, LearningNode as LearningNode, LearningNodeNB as LearningNodeNB, LearningNodeNBAdaptive as LearningNodeNBAdaptive, Node as Node, SplitNode as SplitNode
from skmultiflow.trees.split_criterion import GiniSplitCriterion as GiniSplitCriterion, HellingerDistanceCriterion as HellingerDistanceCriterion, InfoGainSplitCriterion as InfoGainSplitCriterion
from skmultiflow.utils import calculate_object_size as calculate_object_size, get_dimensions as get_dimensions, normalize_values_in_dict as normalize_values_in_dict
from typing import Any, Optional

def HoeffdingTree(max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_criterion: str = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., no_preprune: bool = ..., leaf_prediction: str = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ...): ...

class HoeffdingTreeClassifier(BaseSKMObject, ClassifierMixin):
    def __init__(self, max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_criterion: str = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., no_preprune: bool = ..., leaf_prediction: str = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ...) -> None: ...
    @property
    def max_byte_size(self): ...
    @max_byte_size.setter
    def max_byte_size(self, max_byte_size: Any) -> None: ...
    @property
    def memory_estimate_period(self): ...
    @memory_estimate_period.setter
    def memory_estimate_period(self, memory_estimate_period: Any) -> None: ...
    @property
    def grace_period(self): ...
    @grace_period.setter
    def grace_period(self, grace_period: Any) -> None: ...
    @property
    def split_criterion(self): ...
    @split_criterion.setter
    def split_criterion(self, split_criterion: Any) -> None: ...
    @property
    def split_confidence(self): ...
    @split_confidence.setter
    def split_confidence(self, split_confidence: Any) -> None: ...
    @property
    def tie_threshold(self): ...
    @tie_threshold.setter
    def tie_threshold(self, tie_threshold: Any) -> None: ...
    @property
    def binary_split(self): ...
    @binary_split.setter
    def binary_split(self, binary_split: Any) -> None: ...
    @property
    def stop_mem_management(self): ...
    @stop_mem_management.setter
    def stop_mem_management(self, stop_mem_management: Any) -> None: ...
    @property
    def remove_poor_atts(self): ...
    @remove_poor_atts.setter
    def remove_poor_atts(self, remove_poor_atts: Any) -> None: ...
    @property
    def no_preprune(self): ...
    @no_preprune.setter
    def no_preprune(self, no_pre_prune: Any) -> None: ...
    @property
    def leaf_prediction(self): ...
    @leaf_prediction.setter
    def leaf_prediction(self, leaf_prediction: Any) -> None: ...
    @property
    def nb_threshold(self): ...
    @nb_threshold.setter
    def nb_threshold(self, nb_threshold: Any) -> None: ...
    @property
    def nominal_attributes(self): ...
    @nominal_attributes.setter
    def nominal_attributes(self, nominal_attributes: Any) -> None: ...
    @property
    def classes(self): ...
    @classes.setter
    def classes(self, value: Any) -> None: ...
    def measure_byte_size(self): ...
    def reset(self): ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def get_votes_for_instance(self, X: Any): ...
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any): ...
    @property
    def get_model_measurements(self): ...
    def measure_tree_depth(self): ...
    def get_model_description(self): ...
    @staticmethod
    def compute_hoeffding_bound(range_val: Any, confidence: Any, n: Any): ...
    def new_split_node(self, split_test: Any, class_observations: Any): ...
    def enforce_tracker_limit(self) -> None: ...
    def estimate_model_byte_size(self) -> None: ...
    def deactivate_all_leaves(self) -> None: ...
    def get_model_rules(self): ...
    def get_rules_description(self): ...
