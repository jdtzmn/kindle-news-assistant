from skmultiflow.drift_detection.adwin import ADWIN as ADWIN
from skmultiflow.trees.nodes import ActiveLearningNodePerceptron as ActiveLearningNodePerceptron, AdaNode as AdaNode, FoundNode as FoundNode
from typing import Any, Optional

class AdaLearningNodeForRegression(ActiveLearningNodePerceptron, AdaNode):
    def __init__(self, initial_class_observations: Any, parent_node: Any, random_state: Optional[Any] = ...) -> None: ...
    def number_leaves(self): ...
    def get_error_estimation(self): ...
    def get_error_width(self): ...
    def is_null_error(self): ...
    def kill_tree_children(self, hat: Any) -> None: ...
    def learn_from_instance(self, X: Any, y: Any, weight: Any, rhat: Any, parent: Any, parent_branch: Any) -> None: ... # type: ignore
    def filter_instance_to_leaves(self, X: Any, y: Any, weight: Any, parent: Any, parent_branch: Any, update_splitter_counts: Any, found_nodes: Optional[Any] = ...) -> None: ...
    def get_normalized_error(self, y: Any, y_pred: Any): ...
