from abc import ABCMeta, abstractmethod
from typing import Any, Optional

class AdaNode(metaclass=ABCMeta):
    @abstractmethod
    def number_leaves(self) -> Any: ...
    @abstractmethod
    def get_error_estimation(self) -> Any: ...
    @abstractmethod
    def get_error_width(self) -> Any: ...
    @abstractmethod
    def is_null_error(self) -> Any: ...
    @abstractmethod
    def kill_tree_children(self, hat: Any) -> Any: ...
    @abstractmethod
    def learn_from_instance(self, X: Any, y: Any, weight: Any, hat: Any, parent: Any, parent_branch: Any) -> Any: ...
    @abstractmethod
    def filter_instance_to_leaves(self, X: Any, y: Any, weight: Any, parent: Any, parent_branch: Any, update_splitter_counts: Any, found_nodes: Optional[Any] = ...) -> Any: ...
