from skmultiflow.bayes import do_naive_bayes_prediction as do_naive_bayes_prediction
from skmultiflow.drift_detection import ADWIN as ADWIN
from skmultiflow.trees.nodes import AdaNode as AdaNode, FoundNode as FoundNode, LearningNodeNBAdaptive as LearningNodeNBAdaptive
from skmultiflow.utils import check_random_state as check_random_state, get_max_value_key as get_max_value_key, normalize_values_in_dict as normalize_values_in_dict
from typing import Any, Optional

class AdaLearningNode(LearningNodeNBAdaptive, AdaNode):
    error_change: bool = ...
    def __init__(self, initial_class_observations: Any, random_state: Optional[Any] = ...) -> None: ...
    def number_leaves(self): ...
    def get_error_estimation(self): ...
    def get_error_width(self): ...
    def is_null_error(self): ...
    def kill_tree_children(self, hat: Any) -> None: ...
    def learn_from_instance(self, X: Any, y: Any, weight: Any, hat: Any, parent: Any, parent_branch: Any) -> None: ... # type: ignore
    def get_class_votes(self, X: Any, ht: Any): ...
    def filter_instance_to_leaves(self, X: Any, y: Any, weight: Any, parent: Any, parent_branch: Any, update_splitter_counts: Any, found_nodes: Optional[Any] = ...) -> None: ...
