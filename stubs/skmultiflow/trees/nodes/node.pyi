from abc import ABCMeta
from skmultiflow.trees.nodes import FoundNode as FoundNode
from typing import Any, Optional

class Node(metaclass=ABCMeta):
    def __init__(self, class_observations: Optional[Any] = ...) -> None: ...
    @staticmethod
    def is_leaf(): ...
    def filter_instance_to_leaf(self, X: Any, parent: Any, parent_branch: Any): ...
    def get_observed_class_distribution(self): ...
    def set_observed_class_distribution(self, observed_class_distribution: Any) -> None: ...
    def get_class_votes(self, X: Any, ht: Any): ...
    def observed_class_distribution_is_pure(self): ...
    def subtree_depth(self): ...
    def calculate_promise(self): ...
    def describe_subtree(self, ht: Any, buffer: Any, indent: int = ...) -> None: ...
    def get_description(self) -> None: ...
