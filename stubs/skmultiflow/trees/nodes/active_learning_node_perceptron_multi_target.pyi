from skmultiflow.trees.attribute_observer import NominalAttributeRegressionObserver as NominalAttributeRegressionObserver, NumericAttributeRegressionObserver as NumericAttributeRegressionObserver
from skmultiflow.trees.nodes import ActiveLearningNodePerceptron as ActiveLearningNodePerceptron
from skmultiflow.utils import check_random_state as check_random_state, get_dimensions as get_dimensions
from typing import Any, Optional

class ActiveLearningNodePerceptronMultiTarget(ActiveLearningNodePerceptron):
    perceptron_weight: Any = ...
    random_state: Any = ...
    def __init__(self, initial_class_observations: Any, parent_node: Optional[Any] = ..., random_state: Optional[Any] = ...) -> None: ...
    def learn_from_instance(self, X: Any, y: Any, weight: Any, rht: Any) -> None: ...
    def update_weights(self, X: Any, y: Any, learning_ratio: Any, rht: Any) -> None: ...
    def normalize_perceptron_weights(self) -> None: ...
    def predict(self, X: Any): ...
    def get_weight_seen(self): ...
