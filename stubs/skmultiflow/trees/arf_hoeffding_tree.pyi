from skmultiflow.trees.hoeffding_tree import HoeffdingTreeClassifier as HoeffdingTreeClassifier
from skmultiflow.trees.nodes import InactiveLearningNode as InactiveLearningNode, RandomLearningNodeClassification as RandomLearningNodeClassification, RandomLearningNodeNB as RandomLearningNodeNB, RandomLearningNodeNBAdaptive as RandomLearningNodeNBAdaptive
from skmultiflow.utils import check_random_state as check_random_state
from typing import Any, Optional

class ARFHoeffdingTreeClassifier(HoeffdingTreeClassifier):
    max_features: Any = ...
    remove_poor_attributes: bool = ...
    random_state: Any = ...
    def __init__(self, max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_criterion: str = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., no_preprune: bool = ..., leaf_prediction: str = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ..., max_features: int = ..., random_state: Optional[Any] = ...) -> None: ...
    def reset(self) -> None: ...
    def new_instance(self): ...
