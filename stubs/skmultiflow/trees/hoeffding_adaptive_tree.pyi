from skmultiflow.trees import HoeffdingTreeClassifier as HoeffdingTreeClassifier
from skmultiflow.trees.nodes import AdaLearningNode as AdaLearningNode, AdaSplitNode as AdaSplitNode, InactiveLearningNode as InactiveLearningNode
from skmultiflow.utils import add_dict_values as add_dict_values
from typing import Any, Optional

def HAT(max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_criterion: str = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., no_preprune: bool = ..., leaf_prediction: str = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ..., bootstrap_sampling: bool = ..., random_state: Optional[Any] = ...): ...

class HoeffdingAdaptiveTreeClassifier(HoeffdingTreeClassifier):
    alternate_trees_cnt: int = ...
    pruned_alternate_trees_cnt: int = ...
    switch_alternate_trees_cnt: int = ...
    bootstrap_sampling: Any = ...
    random_state: Any = ...
    def __init__(self, max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_criterion: str = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., no_preprune: bool = ..., leaf_prediction: str = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ..., bootstrap_sampling: bool = ..., random_state: Optional[Any] = ...) -> None: ...
    def reset(self) -> None: ...
    def filter_instance_to_leaves(self, X: Any, y: Any, weight: Any, split_parent: Any, parent_branch: Any, update_splitter_counts: Any): ...
    def get_votes_for_instance(self, X: Any): ...
    def new_split_node(self, split_test: Any, class_observations: Any): ...
