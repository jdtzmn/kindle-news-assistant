from skmultiflow.trees.hoeffding_tree import HoeffdingTreeClassifier as HoeffdingTreeClassifier
from skmultiflow.trees.nodes import AnyTimeActiveLearningNode as AnyTimeActiveLearningNode, AnyTimeInactiveLearningNode as AnyTimeInactiveLearningNode, AnyTimeLearningNodeNB as AnyTimeLearningNodeNB, AnyTimeLearningNodeNBAdaptive as AnyTimeLearningNodeNBAdaptive, AnyTimeSplitNode as AnyTimeSplitNode, LearningNode as LearningNode
from skmultiflow.trees.split_criterion import GiniSplitCriterion as GiniSplitCriterion, InfoGainSplitCriterion as InfoGainSplitCriterion
from skmultiflow.utils import get_dimensions as get_dimensions
from typing import Any, Optional

def HATT(max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., min_samples_reevaluate: int = ..., split_criterion: str = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., leaf_prediction: str = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ...): ...

class ExtremelyFastDecisionTreeClassifier(HoeffdingTreeClassifier):
    def new_split_node(self, split_test: Any, class_observations: Any, attribute_observers: Any): ... # type: ignore
    min_samples_reevaluate: Any = ...
    def __init__(self, max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., min_samples_reevaluate: int = ..., split_criterion: str = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., leaf_prediction: str = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ...) -> None: ...
    classes: Any = ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...) -> None: ...
    def reset(self) -> None: ...
