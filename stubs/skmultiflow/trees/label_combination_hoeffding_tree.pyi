from skmultiflow.core import MultiOutputMixin as MultiOutputMixin
from skmultiflow.trees.hoeffding_tree import HoeffdingTreeClassifier as HoeffdingTreeClassifier
from skmultiflow.trees.nodes import LCActiveLearningNode as LCActiveLearningNode, LCInactiveLearningNode as LCInactiveLearningNode, LCLearningNodeNB as LCLearningNodeNB, LCLearningNodeNBA as LCLearningNodeNBA
from skmultiflow.utils import get_dimensions as get_dimensions
from typing import Any, Optional

def LCHT(max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_criterion: str = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., no_preprune: bool = ..., leaf_prediction: str = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ..., n_labels: Optional[Any] = ...): ...

class LabelCombinationHoeffdingTreeClassifier(HoeffdingTreeClassifier, MultiOutputMixin):
    def __init__(self, max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_criterion: str = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., no_preprune: bool = ..., leaf_prediction: str = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ..., n_labels: Optional[Any] = ...) -> None: ...
    @property
    def n_labels(self): ...
    @n_labels.setter
    def n_labels(self, n_labels: Any) -> None: ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...) -> None: ...
    def predict(self, X: Any): ...
