from operator import attrgetter as attrgetter
from skmultiflow.core import MultiOutputMixin as MultiOutputMixin
from skmultiflow.trees import iSOUPTreeRegressor as iSOUPTreeRegressor
from skmultiflow.trees.nodes import LearningNode as LearningNode, SSTActiveLearningNode as SSTActiveLearningNode, SSTActiveLearningNodeAdaptive as SSTActiveLearningNodeAdaptive, SSTInactiveLearningNode as SSTInactiveLearningNode, SSTInactiveLearningNodeAdaptive as SSTInactiveLearningNodeAdaptive
from skmultiflow.trees.split_criterion import IntraClusterVarianceReductionSplitCriterion as IntraClusterVarianceReductionSplitCriterion
from skmultiflow.utils import get_dimensions as get_dimensions
from typing import Any, Optional

class StackedSingleTargetHoeffdingTreeRegressor(iSOUPTreeRegressor, MultiOutputMixin): # type: ignore
    split_criterion: str = ...
    learning_ratio_perceptron: Any = ...
    learning_ratio_decay: Any = ...
    learning_ratio_const: Any = ...
    random_state: Any = ...
    examples_seen: int = ...
    sum_of_values: float = ...
    sum_of_squares: float = ...
    sum_of_attribute_values: float = ...
    sum_of_attribute_squares: float = ...
    def __init__(self, max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., leaf_prediction: str = ..., no_preprune: bool = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ..., learning_ratio_perceptron: float = ..., learning_ratio_decay: float = ..., learning_ratio_const: bool = ..., random_state: Optional[Any] = ...) -> None: ...
    @property
    def leaf_prediction(self): ...
    @leaf_prediction.setter
    def leaf_prediction(self, leaf_prediction: Any) -> None: ...
    def predict(self, X: Any): ...
