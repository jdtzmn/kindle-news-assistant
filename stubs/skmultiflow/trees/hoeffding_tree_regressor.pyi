from skmultiflow.core import RegressorMixin as RegressorMixin
from skmultiflow.trees.attribute_test import NominalAttributeMultiwayTest as NominalAttributeMultiwayTest
from skmultiflow.trees.hoeffding_tree import HoeffdingTreeClassifier as HoeffdingTreeClassifier
from skmultiflow.trees.nodes import ActiveLearningNode as ActiveLearningNode, ActiveLearningNodeForRegression as ActiveLearningNodeForRegression, ActiveLearningNodePerceptron as ActiveLearningNodePerceptron, InactiveLearningNode as InactiveLearningNode, InactiveLearningNodeForRegression as InactiveLearningNodeForRegression, InactiveLearningNodePerceptron as InactiveLearningNodePerceptron, LearningNode as LearningNode, SplitNode as SplitNode
from skmultiflow.trees.nodes.active_learning_node_perceptron import compute_sd as compute_sd
from skmultiflow.trees.split_criterion import VarianceReductionSplitCriterion as VarianceReductionSplitCriterion
from skmultiflow.utils import get_dimensions as get_dimensions
from typing import Any, Optional

def RegressionHoeffdingTree(max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., leaf_prediction: str = ..., no_preprune: bool = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ..., learning_ratio_perceptron: float = ..., learning_ratio_decay: float = ..., learning_ratio_const: bool = ..., random_state: Optional[Any] = ...): ...

class HoeffdingTreeRegressor(RegressorMixin, HoeffdingTreeClassifier): # type: ignore
    learning_ratio_perceptron: Any = ...
    learning_ratio_decay: Any = ...
    learning_ratio_const: Any = ...
    samples_seen: int = ...
    sum_of_values: float = ...
    sum_of_squares: float = ...
    sum_of_attribute_values: Any = ...
    sum_of_attribute_squares: Any = ...
    random_state: Any = ...
    def __init__(self, max_byte_size: int = ..., memory_estimate_period: int = ..., grace_period: int = ..., split_confidence: float = ..., tie_threshold: float = ..., binary_split: bool = ..., stop_mem_management: bool = ..., remove_poor_atts: bool = ..., leaf_prediction: str = ..., no_preprune: bool = ..., nb_threshold: int = ..., nominal_attributes: Optional[Any] = ..., learning_ratio_perceptron: float = ..., learning_ratio_decay: float = ..., learning_ratio_const: bool = ..., random_state: Optional[Any] = ...) -> None: ...
    @property
    def leaf_prediction(self): ...
    @leaf_prediction.setter
    def leaf_prediction(self, leaf_prediction: Any) -> None: ...
    @property
    def split_criterion(self): ...
    @split_criterion.setter
    def split_criterion(self, split_criterion: Any) -> None: ...
    def normalize_sample(self, X: Any): ...
    def normalize_target_value(self, y: Any): ...
    def get_weights_for_instance(self, X: Any): ...
    def partial_fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...) -> None: ... # type: ignore
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any) -> None: ...
