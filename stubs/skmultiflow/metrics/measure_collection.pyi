from skmultiflow.utils import check_weights as check_weights
from skmultiflow.utils.data_structures import ConfusionMatrix as ConfusionMatrix, FastBuffer as FastBuffer, FastComplexBuffer as FastComplexBuffer, MOLConfusionMatrix as MOLConfusionMatrix
from typing import Any, Optional

class ClassificationMeasurements:
    n_targets: Any = ...
    targets: Any = ...
    confusion_matrix: Any = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    last_sample: Any = ...
    sample_count: int = ...
    majority_classifier: int = ...
    correct_no_change: int = ...
    def __init__(self, targets: Optional[Any] = ..., dtype: Any = ...) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any, weight: float = ...) -> None: ...
    def get_last(self): ...
    def get_majority_class(self): ...
    def get_accuracy(self): ...
    def get_incorrectly_classified_ratio(self): ...
    def get_kappa(self): ...
    def get_kappa_t(self): ...
    def get_kappa_m(self): ...
    def get_g_mean(self): ...
    def get_f1_score(self): ...
    def get_precision(self): ...
    def get_recall(self): ...
    def get_info(self): ...

class WindowClassificationMeasurements:
    n_targets: Any = ...
    targets: Any = ...
    confusion_matrix: Any = ...
    last_class: Any = ...
    window_size: Any = ...
    true_labels: Any = ...
    predictions: Any = ...
    temp: int = ...
    last_prediction: Any = ...
    last_true_label: Any = ...
    last_sample: Any = ...
    majority_classifier: int = ...
    correct_no_change: int = ...
    majority_classifier_correction: Any = ...
    correct_no_change_correction: Any = ...
    def __init__(self, targets: Optional[Any] = ..., dtype: Any = ..., window_size: int = ...) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any, weight: float = ...) -> None: ...
    def get_last(self): ...
    def get_majority_class(self): ...
    def get_accuracy(self): ...
    def get_incorrectly_classified_ratio(self): ...
    def get_kappa(self): ...
    def get_kappa_t(self): ...
    def get_kappa_m(self): ...
    def get_g_mean(self): ...
    def get_f1_score(self): ...
    def get_precision(self): ...
    def get_recall(self): ...
    @property
    def sample_count(self): ...
    def get_info(self): ...

class MultiTargetClassificationMeasurements:
    n_targets: Any = ...
    confusion_matrix: Any = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    sample_count: int = ...
    targets: Any = ...
    exact_match_count: int = ...
    j_sum: int = ...
    def __init__(self, targets: Optional[Any] = ..., dtype: Any = ...) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any) -> None: ...
    def get_last(self): ...
    def get_hamming_loss(self): ...
    def get_hamming_score(self): ...
    def get_exact_match(self): ...
    def get_j_index(self): ...
    def get_total_sum(self): ...
    def get_info(self): ...

class WindowMultiTargetClassificationMeasurements:
    n_targets: Any = ...
    confusion_matrix: Any = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    targets: Any = ...
    window_size: Any = ...
    exact_match_count: int = ...
    j_sum: int = ...
    true_labels: Any = ...
    predictions: Any = ...
    def __init__(self, targets: Optional[Any] = ..., dtype: Any = ..., window_size: int = ...) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any) -> None: ...
    def get_last(self): ...
    def get_hamming_loss(self): ...
    def get_hamming_score(self): ...
    def get_exact_match(self): ...
    def get_j_index(self): ...
    def get_total_sum(self): ...
    @property
    def matrix(self): ...
    @property
    def sample_count(self): ...
    def get_info(self): ...

class RegressionMeasurements:
    total_square_error: float = ...
    average_error: float = ...
    sample_count: int = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any) -> None: ...
    def get_mean_square_error(self): ...
    def get_average_error(self): ...
    def get_last(self): ...
    def get_info(self): ...

class WindowRegressionMeasurements:
    total_square_error: float = ...
    average_error: float = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    total_square_error_correction: Any = ...
    average_error_correction: Any = ...
    window_size: Any = ...
    def __init__(self, window_size: int = ...) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y_true: Any, y_pred: Any) -> None: ...
    def get_mean_square_error(self): ...
    def get_average_error(self): ...
    def get_last(self): ...
    @property
    def sample_count(self): ...
    def get_info(self): ...

class MultiTargetRegressionMeasurements:
    n_targets: int = ...
    total_square_error: float = ...
    average_error: float = ...
    sample_count: int = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y: Any, prediction: Any) -> None: ...
    def get_average_mean_square_error(self): ...
    def get_average_absolute_error(self): ...
    def get_average_root_mean_square_error(self): ...
    def get_last(self): ...
    def get_info(self): ...

class WindowMultiTargetRegressionMeasurements:
    n_targets: int = ...
    total_square_error: float = ...
    average_error: float = ...
    last_true_label: Any = ...
    last_prediction: Any = ...
    total_square_error_correction: Any = ...
    average_error_correction: Any = ...
    window_size: Any = ...
    def __init__(self, window_size: int = ...) -> None: ...
    def reset(self) -> None: ...
    def add_result(self, y: Any, prediction: Any) -> None: ...
    def get_average_mean_square_error(self): ...
    def get_average_absolute_error(self): ...
    def get_average_root_mean_square_error(self): ...
    def get_last(self): ...
    def get_info(self): ...

class RunningTimeMeasurements:
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    def compute_training_time_begin(self) -> None: ...
    def compute_training_time_end(self) -> None: ...
    def compute_testing_time_begin(self) -> None: ...
    def compute_testing_time_end(self) -> None: ...
    def update_time_measurements(self, increment: int = ...) -> None: ...
    def get_current_training_time(self): ...
    def get_current_testing_time(self): ...
    def get_current_total_running_time(self): ...
    def get_info(self): ...

def hamming_score(true_labels: Any, predicts: Any): ...
def j_index(true_labels: Any, predicts: Any): ...
def exact_match(true_labels: Any, predicts: Any): ...
