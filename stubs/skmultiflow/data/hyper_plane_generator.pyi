from skmultiflow.data.base_stream import Stream as Stream
from skmultiflow.utils import check_random_state as check_random_state
from typing import Any, Optional

class HyperplaneGenerator(Stream):
    random_state: Any = ...
    n_num_features: Any = ...
    n_features: Any = ...
    n_classes: int = ...
    n_targets: int = ...
    name: str = ...
    target_names: Any = ...
    feature_names: Any = ...
    target_values: Any = ...
    def __init__(self, random_state: Optional[Any] = ..., n_features: int = ..., n_drift_features: int = ..., mag_change: float = ..., noise_percentage: float = ..., sigma_percentage: float = ...) -> None: ...
    @property
    def n_drift_features(self): ...
    @n_drift_features.setter
    def n_drift_features(self, n_drift_features: Any) -> None: ...
    @property
    def noise_percentage(self): ...
    @noise_percentage.setter
    def noise_percentage(self, noise_percentage: Any) -> None: ...
    @property
    def mag_change(self): ...
    @mag_change.setter
    def mag_change(self, mag_change: Any) -> None: ...
    @property
    def sigma_percentage(self): ...
    @sigma_percentage.setter
    def sigma_percentage(self, sigma_percentage: Any) -> None: ...
    current_sample_x: Any = ...
    current_sample_y: Any = ...
    def next_sample(self, batch_size: int = ...): ...
