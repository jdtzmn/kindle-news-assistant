from abc import ABCMeta, abstractmethod
from skmultiflow.core import BaseSKMObject as BaseSKMObject
from typing import Any

class Stream(BaseSKMObject, metaclass=ABCMeta):
    n_samples: int = ...
    n_classes: int = ...
    cat_features_idx: Any = ...
    current_sample_x: Any = ...
    current_sample_y: Any = ...
    sample_idx: int = ...
    name: Any = ...
    def __init__(self) -> None: ...
    @property
    def n_features(self): ...
    @n_features.setter
    def n_features(self, n_features: Any) -> None: ...
    @property
    def n_cat_features(self): ...
    @n_cat_features.setter
    def n_cat_features(self, n_cat_features: Any) -> None: ...
    @property
    def n_num_features(self): ...
    @n_num_features.setter
    def n_num_features(self, n_num_features: Any) -> None: ...
    @property
    def n_targets(self): ...
    @n_targets.setter
    def n_targets(self, n_targets: Any) -> None: ...
    @property
    def target_values(self): ...
    @target_values.setter
    def target_values(self, target_values: Any) -> None: ...
    @property
    def feature_names(self): ...
    @feature_names.setter
    def feature_names(self, feature_names: Any) -> None: ...
    @property
    def target_names(self): ...
    @target_names.setter
    def target_names(self, target_names: Any) -> None: ...
    @staticmethod
    def prepare_for_use() -> None: ...
    @abstractmethod
    def next_sample(self, batch_size: int = ...) -> Any: ...
    def last_sample(self): ...
    def is_restartable(self): ...
    def restart(self) -> None: ...
    def n_remaining_samples(self): ...
    def has_more_samples(self): ...
    def get_data_info(self): ...
