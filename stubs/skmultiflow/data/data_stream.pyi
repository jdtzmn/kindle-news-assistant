from skmultiflow.data.base_stream import Stream as Stream
from typing import Any, Optional

class DataStream(Stream):
    cat_features: Any = ...
    task_type: Any = ...
    n_classes: int = ...
    name: Any = ...
    allow_nan: Any = ...
    def __init__(self, data: Any, y: Optional[Any] = ..., target_idx: int = ..., n_targets: int = ..., cat_features: Optional[Any] = ..., name: Optional[Any] = ..., allow_nan: bool = ...) -> None: ...
    @property
    def y(self): ...
    @y.setter
    def y(self, y: Any) -> None: ...
    @property
    def X(self): ...
    @X.setter
    def X(self, X: Any) -> None: ...
    @property
    def data(self): ...
    @data.setter
    def data(self, data: Any) -> None: ...
    def data(self) -> None: ... # type: ignore
    @property
    def target_idx(self): ...
    @target_idx.setter
    def target_idx(self, target_idx: Any) -> None: ...
    @property
    def n_targets(self): ...
    @n_targets.setter
    def n_targets(self, n_targets: Any) -> None: ...
    @property
    def cat_features_idx(self): ...
    @cat_features_idx.setter
    def cat_features_idx(self, cat_features_idx: Any) -> None: ...
    sample_idx: int = ...
    current_sample_x: Any = ...
    current_sample_y: Any = ...
    def restart(self) -> None: ...
    def next_sample(self, batch_size: int = ...): ...
    def has_more_samples(self): ...
    def n_remaining_samples(self): ...
    def print_df(self) -> None: ...
    def get_data_info(self): ...
    def get_info(self): ...

def check_data_consistency(raw_data_frame: Any, allow_nan: bool = ...) -> None: ...
