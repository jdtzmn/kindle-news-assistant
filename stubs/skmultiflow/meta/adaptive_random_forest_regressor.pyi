from skmultiflow.core import BaseSKMObject as BaseSKMObject, RegressorMixin as RegressorMixin
from skmultiflow.drift_detection import ADWIN as ADWIN
from skmultiflow.drift_detection.base_drift_detector import BaseDriftDetector as BaseDriftDetector
from skmultiflow.meta import AdaptiveRandomForestClassifier as AdaptiveRandomForestClassifier
from skmultiflow.metrics.measure_collection import RegressionMeasurements as RegressionMeasurements
from skmultiflow.trees.arf_hoeffding_tree_regressor import ARFHoeffdingTreeRegressor as ARFHoeffdingTreeRegressor
from skmultiflow.utils import check_random_state as check_random_state, get_dimensions as get_dimensions
from typing import Any, Optional

class AdaptiveRandomForestRegressor(RegressorMixin, AdaptiveRandomForestClassifier): # type: ignore
    learning_ratio_perceptron: Any = ...
    learning_ratio_decay: Any = ...
    learning_ratio_const: Any = ...
    weighted_vote_strategy: Any = ...
    aggregation_method: Any = ...
    drift_detection_criteria: Any = ...
    def __init__(self, n_estimators: int=..., max_features: Any=..., aggregation_method: str=..., weighted_vote_strategy: str=..., lambda_value: int=..., drift_detection_method: BaseDriftDetector=..., warning_detection_method: BaseDriftDetector=..., drift_detection_criteria: str=..., max_byte_size: int=..., memory_estimate_period: int=..., grace_period: int=..., split_confidence: float=..., tie_threshold: float=..., binary_split: bool=..., stop_mem_management: bool=..., remove_poor_atts: bool=..., no_preprune: bool=..., leaf_prediction: str=..., nominal_attributes: list=..., learning_ratio_perceptron: float=..., learning_ratio_decay: float=..., learning_ratio_const: bool=..., random_state: Any=...) -> None: ...
    def partial_fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ... # type: ignore
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any) -> None: ...
    ensemble: Any = ...
    max_features: int = ...
    instances_seen: int = ...
    def reset(self) -> None: ...

class ARFRegBaseLearner(BaseSKMObject):
    index_original: Any = ...
    estimator: Any = ...
    created_on: Any = ...
    is_background_learner: Any = ...
    evaluator_method: Any = ...
    drift_detection_method: Any = ...
    warning_detection_method: Any = ...
    performance_metric: Any = ...
    drift_detection_criteria: Any = ...
    last_drift_on: int = ...
    last_warning_on: int = ...
    n_drifts_detected: int = ...
    n_warnings_detected: int = ...
    drift_detection: Any = ...
    warning_detection: Any = ...
    background_learner: Any = ...
    evaluator: Any = ...
    def __init__(self, index_original: int, estimator: ARFHoeffdingTreeRegressor, instances_seen: int, drift_detection_method: BaseDriftDetector, warning_detection_method: BaseDriftDetector, performance_metric: str, drift_detection_criteria: str, is_background_learner: Any) -> None: ...
    def reset(self, instances_seen: Any) -> None: ... # type: ignore
    def partial_fit(self, X: Any, y: Any, sample_weight: Any, instances_seen: Any) -> None: ...
    def get_error(self): ...
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any) -> None: ...
