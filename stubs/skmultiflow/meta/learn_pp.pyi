from skmultiflow.core import BaseSKMObject as BaseSKMObject, ClassifierMixin as ClassifierMixin, MetaEstimatorMixin as MetaEstimatorMixin
from skmultiflow.utils import check_random_state as check_random_state
from typing import Any, Optional

def LearnPP(base_estimator: Any = ..., error_threshold: float = ..., n_estimators: int = ..., n_ensembles: int = ..., window_size: int = ..., random_state: Optional[Any] = ...): ...

class LearnPPClassifier(BaseSKMObject, ClassifierMixin, MetaEstimatorMixin):
    base_estimator: Any = ...
    n_estimators: Any = ...
    ensembles: Any = ...
    ensemble_weights: Any = ...
    classes: Any = ...
    n_ensembles: Any = ...
    random: Any = ...
    random_state: Any = ...
    error_threshold: Any = ...
    X_batch: Any = ...
    y_batch: Any = ...
    window_size: Any = ...
    def __init__(self, base_estimator: Any = ..., error_threshold: float = ..., n_estimators: int = ..., n_ensembles: int = ..., window_size: int = ..., random_state: Optional[Any] = ...) -> None: ...
    def reset(self) -> None: ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def predict_proba(self, X: Any): ...
    def predict(self, X: Any): ...
