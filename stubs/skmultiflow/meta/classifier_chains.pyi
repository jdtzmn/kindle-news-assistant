from sklearn.linear_model import SGDClassifier as SGDClassifier # type: ignore
from skmultiflow.core import BaseSKMObject as BaseSKMObject, ClassifierMixin as ClassifierMixin, MetaEstimatorMixin as MetaEstimatorMixin, MultiOutputMixin as MultiOutputMixin
from skmultiflow.utils import check_random_state as check_random_state
from typing import Any, Optional

class ClassifierChain(BaseSKMObject, ClassifierMixin, MetaEstimatorMixin, MultiOutputMixin):
    base_estimator: Any = ...
    order: Any = ...
    random_state: Any = ...
    chain: Any = ...
    ensemble: Any = ...
    L: Any = ...
    def __init__(self, base_estimator: Any = ..., order: Optional[Any] = ..., random_state: Optional[Any] = ...) -> None: ...
    def fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any): ...
    def reset(self): ...

def P(y: Any, x: Any, cc: Any, payoff: Any = ...): ...

class ProbabilisticClassifierChain(ClassifierChain):
    def __init__(self, base_estimator: Any = ..., order: Optional[Any] = ..., random_state: Optional[Any] = ...) -> None: ...
    def predict(self, X: Any): ...

class MonteCarloClassifierChain(ProbabilisticClassifierChain):
    M: Any = ...
    def __init__(self, base_estimator: Any = ..., M: int = ..., random_state: Optional[Any] = ...) -> None: ...
    def sample(self, x: Any): ...
    def predict(self, X: Any, M: Optional[Any] = ...): ...
