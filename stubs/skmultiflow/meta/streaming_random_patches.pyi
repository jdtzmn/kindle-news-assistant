import numpy as np # type: ignore
from skmultiflow.core import BaseSKMObject as BaseSKMObject, ClassifierMixin as ClassifierMixin, MetaEstimatorMixin as MetaEstimatorMixin, clone as clone
from skmultiflow.drift_detection import ADWIN as ADWIN
from skmultiflow.drift_detection.base_drift_detector import BaseDriftDetector as BaseDriftDetector
from skmultiflow.metrics import ClassificationPerformanceEvaluator as ClassificationPerformanceEvaluator
from skmultiflow.trees import HoeffdingTreeClassifier as HoeffdingTreeClassifier
from skmultiflow.utils import check_random_state as check_random_state, get_dimensions as get_dimensions
from typing import Any, Optional

class StreamingRandomPatchesClassifier(BaseSKMObject, ClassifierMixin, MetaEstimatorMixin):
    base_estimator: Any = ...
    n_estimators: Any = ...
    subspace_mode: Any = ...
    subspace_size: Any = ...
    training_method: Any = ...
    lam: Any = ...
    drift_detection_method: Any = ...
    warning_detection_method: Any = ...
    disable_weighted_vote: Any = ...
    disable_drift_detection: Any = ...
    disable_background_learner: Any = ...
    drift_detection_criteria: str = ...
    nominal_attributes: Any = ...
    random_state: Any = ...
    ensemble: Any = ...
    def __init__(self, base_estimator: Any=..., n_estimators: int=..., subspace_mode: str=..., subspace_size: int=..., training_method: str=..., lam: float=..., drift_detection_method: BaseDriftDetector=..., warning_detection_method: BaseDriftDetector=..., disable_weighted_vote: bool=..., disable_drift_detection: bool=..., disable_background_learner: bool=..., nominal_attributes: Any=..., random_state: Any=...) -> None: ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any): ...
    def reset(self) -> None: ...

class StreamingRandomPatchesBaseLearner:
    idx_original: Any = ...
    created_on: Any = ...
    base_estimator: Any = ...
    performance_evaluator: Any = ...
    feature_indexes: Any = ...
    disable_background_learner: Any = ...
    disable_drift_detector: Any = ...
    drift_detection_method: Any = ...
    warning_detection_method: Any = ...
    drift_detection_criteria: Any = ...
    is_background_learner: Any = ...
    n_drifts_detected: int = ...
    n_drifts_induced: int = ...
    n_warnings_detected: int = ...
    n_warnings_induced: int = ...
    nominal_attributes: Any = ...
    random_state: Any = ...
    def __init__(self, idx_original: Any, base_estimator: Any, performance_evaluator: Any, created_on: Any, disable_background_learner: Any, disable_drift_detector: Any, drift_detection_method: Any, warning_detection_method: Any, drift_detection_criteria: Any, is_background_learner: Any, feature_indexes: Optional[Any] = ..., nominal_attributes: Optional[Any] = ..., random_state: Optional[Any] = ...) -> None: ...
    def partial_fit(self, X: np.ndarray, y: np.ndarray, classes: list, sample_weight: np.ndarray, n_samples_seen: int, random_state: np.random) -> Any: ...
    def predict_proba(self, X: Any): ...
    def reset(self, n_features: int, n_samples_seen: int, random_state: np.random) -> Any: ...

def get_all_k_combinations(k: int, n_items: int) -> np.ndarray: ...
def get_random_k_combinations(k: int, n_items: int, n_combinations: int, random_state: np.random) -> np.ndarray: ...
