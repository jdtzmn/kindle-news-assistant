from skmultiflow.bayes import NaiveBayes as NaiveBayes
from skmultiflow.core import BaseSKMObject as BaseSKMObject, ClassifierMixin as ClassifierMixin, MetaEstimatorMixin as MetaEstimatorMixin
from typing import Any, Optional

def AccuracyWeightedEnsemble(n_estimators: int = ..., n_kept_estimators: int = ..., base_estimator: Any = ..., window_size: int = ..., n_splits: int = ...): ...

class AccuracyWeightedEnsembleClassifier(BaseSKMObject, ClassifierMixin, MetaEstimatorMixin):
    class WeightedClassifier:
        estimator: Any = ...
        weight: Any = ...
        seen_labels: Any = ...
        def __init__(self, estimator: Any, weight: Any, seen_labels: Any) -> None: ...
        def __lt__(self, other: Any) -> Any: ...
    n_estimators: Any = ...
    n_kept_estimators: Any = ...
    base_estimator: Any = ...
    models_pool: Any = ...
    n_splits: Any = ...
    window_size: Any = ...
    p: int = ...
    X_chunk: Any = ...
    y_chunk: Any = ...
    def __init__(self, n_estimators: int = ..., n_kept_estimators: int = ..., base_estimator: Any = ..., window_size: int = ..., n_splits: int = ...) -> None: ...
    def partial_fit(self, X: Any, y: Optional[Any] = ..., classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def do_instance_pruning(self) -> None: ...
    @staticmethod
    def train_model(model: Any, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any) -> None: ...
    def reset(self) -> None: ...
    @staticmethod
    def compute_score(model: Any, X: Any, y: Any): ...
    def compute_score_crossvalidation(self, model: Any, n_splits: Any): ...
    def compute_weight(self, model: Any, baseline_score: Any, n_splits: Optional[Any] = ...): ...
    @staticmethod
    def compute_baseline(y: Any): ...
