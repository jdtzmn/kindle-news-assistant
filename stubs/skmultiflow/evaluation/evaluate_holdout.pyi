from skmultiflow.evaluation.base_evaluator import StreamEvaluator as StreamEvaluator
from skmultiflow.utils import constants as constants, get_dimensions as get_dimensions
from typing import Any, Optional

class EvaluateHoldout(StreamEvaluator):
    n_wait: Any = ...
    max_samples: Any = ...
    batch_size: Any = ...
    max_time: Any = ...
    output_file: Any = ...
    show_plot: Any = ...
    metrics: Any = ...
    restart_stream: Any = ...
    dynamic_test_set: Any = ...
    test_size: Any = ...
    n_sliding: Any = ...
    def __init__(self, n_wait: int = ..., max_samples: int = ..., batch_size: int = ..., max_time: Any = ..., metrics: Optional[Any] = ..., output_file: Optional[Any] = ..., show_plot: bool = ..., restart_stream: bool = ..., test_size: int = ..., dynamic_test_set: bool = ...) -> None: ...
    model: Any = ...
    def evaluate(self, stream: Any, model: Any, model_names: Optional[Any] = ...): ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def predict(self, X: Any): ...
    def get_info(self): ...
