from skmultiflow.core import BaseSKMObject as BaseSKMObject, ClassifierMixin as ClassifierMixin
from typing import Any, Optional

class PerceptronMask(BaseSKMObject, ClassifierMixin):
    penalty: Any = ...
    alpha: Any = ...
    fit_intercept: Any = ...
    max_iter: Any = ...
    tol: Any = ...
    shuffle: Any = ...
    verbose: Any = ...
    eta0: Any = ...
    n_jobs: Any = ...
    random_state: Any = ...
    early_stopping: Any = ...
    validation_fraction: Any = ...
    n_iter_no_change: Any = ...
    class_weight: Any = ...
    warm_start: Any = ...
    classifier: Any = ...
    def __init__(self, penalty: Optional[Any] = ..., alpha: float = ..., fit_intercept: bool = ..., max_iter: int = ..., tol: float = ..., shuffle: bool = ..., verbose: int = ..., eta0: float = ..., n_jobs: Optional[Any] = ..., random_state: int = ..., early_stopping: bool = ..., validation_fraction: float = ..., n_iter_no_change: int = ..., class_weight: Optional[Any] = ..., warm_start: bool = ...) -> None: ...
    def fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any): ...
