from skmultiflow.drift_detection.base_drift_detector import BaseDriftDetector as BaseDriftDetector
from typing import Any, Optional

class ADWIN(BaseDriftDetector):
    MAX_BUCKETS: int = ...
    delta: Any = ...
    last_bucket_row: int = ...
    list_row_bucket: Any = ...
    bucket_number: int = ...
    mint_min_window_longitude: int = ...
    mdbl_delta: float = ...
    mint_time: int = ...
    mdbl_width: int = ...
    detect: int = ...
    detect_twice: int = ...
    mint_clock: int = ...
    bln_bucket_deleted: bool = ...
    bucket_num_max: int = ...
    mint_min_window_length: int = ...
    def __init__(self, delta: float = ...) -> None: ...
    def reset(self) -> None: ...
    def get_change(self): ...
    def reset_change(self) -> None: ...
    def set_clock(self, clock: Any) -> None: ...
    def detected_warning_zone(self): ...
    @property
    def width(self): ...
    @property
    def n_detections(self): ...
    @property
    def total(self): ...
    @property
    def variance(self): ...
    @property
    def estimation(self): ...
    @estimation.setter
    def estimation(self, value: Any) -> None: ...
    @property
    def width_t(self): ...
    def add_element(self, value: Any) -> None: ...
    @staticmethod
    def bucket_size(row: Any): ...
    def delete_element(self): ...
    in_concept_change: Any = ...
    def detected_change(self): ...

class List:
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    def add_to_head(self) -> None: ...
    def remove_from_head(self) -> None: ...
    def add_to_tail(self) -> None: ...
    def remove_from_tail(self) -> None: ...
    @property
    def first(self): ...
    @property
    def last(self): ...
    @property
    def size(self): ...

class Item:
    next: Any = ...
    previous: Any = ...
    bucket_size_row: Any = ...
    max_buckets: Any = ...
    bucket_total: Any = ...
    bucket_variance: Any = ...
    def __init__(self, next_item: Optional[Any] = ..., previous_item: Optional[Any] = ...) -> None: ...
    def reset(self): ...
    def insert_bucket(self, value: Any, variance: Any) -> None: ...
    def remove_bucket(self) -> None: ...
    def compress_bucket_row(self, num_deleted: int = ...) -> None: ...
    def get_next_item(self): ...
    def set_next_item(self, next_item: Any) -> None: ...
    def get_previous(self): ...
    def set_previous(self, previous: Any) -> None: ...
    def get_total(self, index: Any): ...
    def get_variance(self, index: Any): ...
    def set_total(self, value: Any, index: Any) -> None: ...
    def set_variance(self, value: Any, index: Any) -> None: ...
