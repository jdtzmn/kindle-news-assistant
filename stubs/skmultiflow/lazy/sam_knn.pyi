from . import libNearestNeighbor as libNearestNeighbor # type: ignore
from skmultiflow.core import BaseSKMObject as BaseSKMObject, ClassifierMixin as ClassifierMixin
from skmultiflow.utils import get_dimensions as get_dimensions
from typing import Any, Optional

def SAMKNN(n_neighbors: int = ..., weighting: str = ..., max_window_size: int = ..., ltm_size: float = ..., min_stm_size: int = ..., stm_size_option: str = ..., use_ltm: bool = ...): ...

class SAMKNNClassifier(BaseSKMObject, ClassifierMixin):
    n_neighbors: Any = ...
    weighting: Any = ...
    max_wind_size: Any = ...
    ltm_size: Any = ...
    min_stm_size: Any = ...
    use_ltm: Any = ...
    stm_size_option: Any = ...
    maxLTMSize: Any = ...
    maxSTMSize: Any = ...
    minSTMSize: Any = ...
    STMDistances: Any = ...
    getLabelsFct: Any = ...
    STMSizeAdaption: Any = ...
    predictFct: Any = ...
    sizeCheckFct: Any = ...
    interLeavedPredHistories: Any = ...
    LTMPredHistory: Any = ...
    STMPredHistory: Any = ...
    CMPredHistory: Any = ...
    trainStepCount: int = ...
    STMSizes: Any = ...
    LTMSizes: Any = ...
    numSTMCorrect: int = ...
    numLTMCorrect: int = ...
    numCMCorrect: int = ...
    numPossibleCorrectPredictions: int = ...
    numCorrectPredictions: int = ...
    classifierChoice: Any = ...
    predHistory: Any = ...
    def __init__(self, n_neighbors: int = ..., weighting: str = ..., max_window_size: int = ..., ltm_size: float = ..., min_stm_size: int = ..., stm_size_option: str = ..., use_ltm: bool = ...) -> None: ...
    @staticmethod
    def get_distances(sample: Any, samples: Any): ...
    def cluster_down(self, samples: Any, labels: Any): ...
    def size_check_fade_out(self): ...
    def size_check_STMLTM(self): ...
    def clean_samples(self, samplesCl: Any, labelsCl: Any, onlyLast: bool = ...): ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any) -> None: ...
    @staticmethod
    def get_maj_label(distances: Any, labels: Any, numNeighbours: Any): ...
    @staticmethod
    def get_distance_weighted_label(distances: Any, labels: Any, numNeighbours: Any): ...
    def get_complexity(self): ...
    def get_complexity_num_parameter_metric(self): ...
    @property
    def STMSamples(self): ...
    @property
    def STMLabels(self): ...
    @property
    def LTMSamples(self): ...
    @property
    def LTMLabels(self): ...

class STMSizer:
    @staticmethod
    def getNewSTMSize(adaptionStrategy: Any, labels: Any, nNeighbours: Any, getLabelsFct: Any, predictionHistories: Any, distancesSTM: Any, minSTMSize: Any): ...
    @staticmethod
    def accScore(predLabels: Any, labels: Any): ...
    @staticmethod
    def getInterleavedTestTrainAcc(labels: Any, nNeighbours: Any, getLabelsFct: Any, distancesSTM: Any): ...
    @staticmethod
    def getInterleavedTestTrainAccPredHistory(labels: Any, nNeighbours: Any, getLabelsFct: Any, predictionHistory: Any, distancesSTM: Any): ...
    @staticmethod
    def adaptHistories(numberOfDeletions: Any, predictionHistories: Any): ...
    @staticmethod
    def getMaxAccWindowSize(labels: Any, nNeighbours: Any, getLabelsFct: Any, predictionHistories: Any, distancesSTM: Any, minSize: int = ...): ...
    @staticmethod
    def getMaxAccApproxWindowSize(labels: Any, nNeighbours: Any, getLabelsFct: Any, predictionHistories: Any, distancesSTM: Any, minSize: int = ...): ...
