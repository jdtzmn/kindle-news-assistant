from skmultiflow.core import BaseSKMObject as BaseSKMObject
from typing import Any, Optional

class Rule(BaseSKMObject):
    predicate_set: Any = ...
    def __init__(self, class_distribution: Optional[Any] = ..., drift_detector: Optional[Any] = ..., class_idx: Optional[Any] = ...) -> None: ...
    @property
    def drift_detector(self): ...
    @drift_detector.setter
    def drift_detector(self, drift_detector: Any) -> None: ...
    @property
    def observed_class_distribution(self): ...
    @observed_class_distribution.setter
    def observed_class_distribution(self, dist: Any) -> None: ...
    @property
    def class_idx(self): ...
    @class_idx.setter
    def class_idx(self, class_idx: Any) -> None: ...
    def covers_instance(self, X: Any): ...
    def restart(self) -> None: ...
    def get_rule(self): ...
    def __eq__(self, other: Any) -> Any: ...
