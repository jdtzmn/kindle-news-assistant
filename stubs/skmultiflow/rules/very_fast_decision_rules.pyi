from skmultiflow.bayes import do_naive_bayes_prediction as do_naive_bayes_prediction
from skmultiflow.core import BaseSKMObject as BaseSKMObject, ClassifierMixin as ClassifierMixin
from skmultiflow.rules.base_predicate import Predicate as Predicate
from skmultiflow.rules.base_rule import Rule as Rule
from skmultiflow.rules.foil_gain_rule_criterion import FoilGainExpandCriterion as FoilGainExpandCriterion
from skmultiflow.rules.hellinger_distance_criterion import HellingerDistanceCriterion as HellingerDistanceCriterion
from skmultiflow.rules.info_gain_rule_criterion import InfoGainExpandCriterion as InfoGainExpandCriterion
from skmultiflow.rules.nominal_attribute_class_observer import NominalAttributeClassObserver as NominalAttributeClassObserver
from skmultiflow.rules.numeric_attribute_class_observer import GaussianNumericAttributeClassObserver as GaussianNumericAttributeClassObserver
from skmultiflow.trees.attribute_observer import AttributeClassObserverNull as AttributeClassObserverNull
from skmultiflow.utils import calculate_object_size as calculate_object_size, get_dimensions as get_dimensions, normalize_values_in_dict as normalize_values_in_dict
from typing import Any, Optional

def VFDR(expand_confidence: float = ..., ordered_rules: bool = ..., grace_period: int = ..., tie_threshold: float = ..., rule_prediction: str = ..., nominal_attributes: Optional[Any] = ..., max_rules: int = ..., nb_threshold: int = ..., nb_prediction: bool = ..., drift_detector: Optional[Any] = ..., expand_criterion: str = ..., remove_poor_atts: bool = ..., min_weight: int = ...): ...

class VeryFastDecisionRulesClassifier(BaseSKMObject, ClassifierMixin):
    class Rule(Rule): # type: ignore
        def __init__(self, class_distribution: Any, drift_detector: Any, class_idx: Any) -> None: ...
        @property
        def weight_seen_at_last_expand(self): ...
        @weight_seen_at_last_expand.setter
        def weight_seen_at_last_expand(self, weight: Any) -> None: ...
        def learn_from_instance(self, X: Any, y: Any, weight: Any, avfdr: Any) -> None: ...
        def get_weight_seen(self): ...
        def get_best_expand_suggestion(self, criterion: Any, class_idx: Any): ...
        def get_class_votes(self, X: Any, vfdr: Any): ...
        def disable_attribute(self, att_idx: Any) -> None: ...
        def restart(self) -> None: ...
        def predict(self, y: Any): ...
    def new_rule(self, class_distribution: Optional[Any] = ..., drift_detector: Optional[Any] = ..., class_idx: Optional[Any] = ...): ...
    def get_votes_for_instance(self, X: Any): ...
    def first_hit(self, X: Any): ...
    def weighted_max(self, X: Any): ...
    def weighted_sum(self, X: Any): ...
    classes: Any = ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any): ...
    def get_model_measurements(self): ...
    def measure_model_size(self, unit: str = ...): ...
    rule_set: Any = ...
    default_rule: Any = ...
    def reset(self): ...
    def get_model_rules(self): ...
    def get_model_description(self): ...
    @staticmethod
    def compute_hoeffding_bound(range_val: Any, confidence: Any, n: Any): ...
    grace_period: Any = ...
    expand_confidence: Any = ...
    tie_threshold: Any = ...
    rule_prediction: Any = ...
    nominal_attributes: Any = ...
    max_rules: Any = ...
    nb_threshold: Any = ...
    ordered_rules: Any = ...
    drift_detector: Any = ...
    expand_criterion: Any = ...
    remove_poor_atts: Any = ...
    nb_prediction: Any = ...
    min_weight: Any = ...
    def __init__(self, expand_confidence: float = ..., ordered_rules: bool = ..., grace_period: int = ..., tie_threshold: float = ..., rule_prediction: str = ..., nominal_attributes: Optional[Any] = ..., max_rules: int = ..., nb_threshold: int = ..., nb_prediction: bool = ..., drift_detector: Optional[Any] = ..., expand_criterion: str = ..., remove_poor_atts: bool = ..., min_weight: int = ...) -> None: ...
    @property # type: ignore
    def grace_period(self): ...
    @grace_period.setter
    def grace_period(self, grace_period: Any) -> None: ...
    @property # type: ignore
    def expand_confidence(self): ...
    @expand_confidence.setter
    def expand_confidence(self, expand_confidence: Any) -> None: ...
    @property # type: ignore
    def tie_threshold(self): ...
    @tie_threshold.setter
    def tie_threshold(self, tie_threshold: Any) -> None: ...
    @property # type: ignore
    def remove_poor_atts(self): ...
    @remove_poor_atts.setter
    def remove_poor_atts(self, remove_poor_atts: Any) -> None: ...
    @property # type: ignore
    def rule_prediction(self): ...
    @rule_prediction.setter
    def rule_prediction(self, value: Any) -> None: ...
    @property # type: ignore
    def nb_threshold(self): ...
    @nb_threshold.setter
    def nb_threshold(self, nb_threshold: Any) -> None: ...
    @property # type: ignore
    def nominal_attributes(self): ...
    @nominal_attributes.setter
    def nominal_attributes(self, value: Any) -> None: ...
    @property # type: ignore
    def classes(self): ...
    @classes.setter
    def classes(self, value: Any) -> None: ...
    @property # type: ignore
    def ordered_rules(self): ...
    @ordered_rules.setter
    def ordered_rules(self, value: Any) -> None: ...
