from skmultiflow.core.base import BaseSKMObject as BaseSKMObject, ClassifierMixin as ClassifierMixin
from typing import Any, Optional

class RobustSoftLearningVectorQuantization(ClassifierMixin, BaseSKMObject):
    sigma: Any = ...
    random_state: Any = ...
    epsilon: float = ...
    initial_prototypes: Any = ...
    prototypes_per_class: Any = ...
    initial_fit: bool = ...
    classes_: Any = ...
    learning_rate: Any = ...
    gamma: Any = ...
    gradient_descent: Any = ...
    def __init__(self, prototypes_per_class: int = ..., initial_prototypes: Optional[Any] = ..., sigma: float = ..., random_state: Optional[Any] = ..., gradient_descent: str = ..., gamma: float = ...) -> None: ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ..., sample_weight: Optional[Any] = ...): ...
    def predict(self, X: Any): ...
    def predict_proba(self, X: Any) -> None: ...
    @property
    def prototypes(self): ...
    @property
    def prototypes_classes(self): ...
    @property
    def class_labels(self): ...
