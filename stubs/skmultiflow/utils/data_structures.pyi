from skmultiflow.utils import get_dimensions as get_dimensions
from typing import Any, Optional

class FastBuffer:
    current_size: int = ...
    max_size: Any = ...
    buffer: Any = ...
    def __init__(self, max_size: Any, object_list: Optional[Any] = ...) -> None: ...
    def configure(self, max_size: Any, object_list: Any) -> None: ...
    def add_element(self, element_list: Any): ...
    def get_next_element(self): ...
    def clear_queue(self) -> None: ...
    def print_queue(self) -> None: ...
    def is_full(self): ...
    def is_empty(self): ...
    def get_current_size(self): ...
    def peek(self): ...
    def get_queue(self): ...
    def get_info(self): ...

class FastComplexBuffer:
    current_size: int = ...
    max_size: Any = ...
    width: Any = ...
    buffer: Any = ...
    def __init__(self, max_size: Any, width: Any) -> None: ...
    def configure(self, max_size: Any, width: Any) -> None: ...
    def add_element(self, element_list: Any): ...
    def get_next_element(self): ...
    def clear_queue(self) -> None: ...
    def print_queue(self) -> None: ...
    def is_full(self): ...
    def is_empty(self): ...
    def get_current_size(self): ...
    def peek(self): ...
    def get_queue(self): ...
    def get_info(self): ...

class ConfusionMatrix:
    n_targets: Any = ...
    sample_count: int = ...
    dtype: Any = ...
    confusion_matrix: Any = ...
    def __init__(self, n_targets: Optional[Any] = ..., dtype: Any = ...) -> None: ...
    def restart(self, n_targets: Any) -> None: ...
    def update(self, i: Optional[Any] = ..., j: Optional[Any] = ..., weight: float = ...): ...
    def remove(self, i: Optional[Any] = ..., j: Optional[Any] = ...): ...
    def reshape(self, m: Any, n: Any): ...
    def shape(self): ...
    def value_at(self, i: Any, j: Any): ...
    def row(self, r: Any): ...
    def column(self, c: Any): ...
    def get_sum_main_diagonal(self): ...
    @property
    def matrix(self): ...
    def get_info(self): ...

class MOLConfusionMatrix:
    n_targets: Any = ...
    dtype: Any = ...
    confusion_matrix: Any = ...
    def __init__(self, n_targets: Optional[Any] = ..., dtype: Any = ...) -> None: ...
    def restart(self, n_targets: Any) -> None: ...
    def update(self, target: Optional[Any] = ..., true: Optional[Any] = ..., pred: Optional[Any] = ..., weight: float = ...): ...
    def remove(self, target: Optional[Any] = ..., true: Optional[Any] = ..., pred: Optional[Any] = ...): ...
    def reshape(self, target: Any, m: Any, n: Any): ...
    def shape(self): ...
    def value_at(self, target: Any, i: Any, j: Any): ...
    def row(self, r: Any): ...
    def column(self, c: Any): ...
    def target(self, t: Any): ...
    def get_sum_main_diagonal(self): ...
    def get_total_sum(self): ...
    def get_total_discordance(self): ...
    @property
    def matrix(self): ...
    def get_info(self): ...

def InstanceWindow(self, n_features: int = ..., n_targets: int = ..., categorical_list: Optional[Any] = ..., max_size: int = ..., dtype: Any = ...): ...

class SlidingWindow:
    window_size: Any = ...
    def __init__(self, window_size: int = ...) -> None: ...
    def configure(self) -> None: ...
    def add_sample(self, X: Any, y: Any) -> None: ...
    def delete_oldest_sample(self) -> None: ...
    def reset(self) -> None: ...
    @property
    def features_buffer(self): ...
    @property
    def targets_buffer(self): ...
    @property
    def n_targets(self): ...
    @property
    def n_features(self): ...
    @property
    def size(self): ...
