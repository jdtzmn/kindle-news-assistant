from ..metrics import get_scorer as get_scorer
from ..model_selection import check_cv as check_cv
from ..preprocessing import LabelBinarizer as LabelBinarizer, LabelEncoder as LabelEncoder
from ..utils import check_array as check_array, check_consistent_length as check_consistent_length, check_random_state as check_random_state, compute_class_weight as compute_class_weight
from ..utils.extmath import log_logistic as log_logistic, row_norms as row_norms, safe_sparse_dot as safe_sparse_dot, softmax as softmax, squared_norm as squared_norm
from ..utils.multiclass import check_classification_targets as check_classification_targets
from ..utils.validation import check_is_fitted as check_is_fitted
from ._base import BaseEstimator as BaseEstimator, LinearClassifierMixin as LinearClassifierMixin, SparseCoefMixin as SparseCoefMixin
from ._sag import sag_solver as sag_solver
from typing import Any, Optional

class LogisticRegression(BaseEstimator, LinearClassifierMixin, SparseCoefMixin):
    penalty: Any = ...
    dual: Any = ...
    tol: Any = ...
    C: Any = ...
    fit_intercept: Any = ...
    intercept_scaling: Any = ...
    class_weight: Any = ...
    random_state: Any = ...
    solver: Any = ...
    max_iter: Any = ...
    multi_class: Any = ...
    verbose: Any = ...
    warm_start: Any = ...
    n_jobs: Any = ...
    l1_ratio: Any = ...
    def __init__(self, penalty: str = ..., *, dual: bool = ..., tol: float = ..., C: float = ..., fit_intercept: bool = ..., intercept_scaling: int = ..., class_weight: Optional[Any] = ..., random_state: Optional[Any] = ..., solver: str = ..., max_iter: int = ..., multi_class: str = ..., verbose: int = ..., warm_start: bool = ..., n_jobs: Optional[Any] = ..., l1_ratio: Optional[Any] = ...) -> None: ...
    classes_: Any = ...
    n_iter_: Any = ...
    coef_: Any = ...
    intercept_: Any = ...
    def fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...
    def predict_proba(self, X: Any): ...
    def predict_log_proba(self, X: Any): ...

class LogisticRegressionCV(LogisticRegression, BaseEstimator, LinearClassifierMixin):
    Cs: Any = ...
    fit_intercept: Any = ...
    cv: Any = ...
    dual: Any = ...
    penalty: Any = ...
    scoring: Any = ...
    tol: Any = ...
    max_iter: Any = ...
    class_weight: Any = ...
    n_jobs: Any = ...
    verbose: Any = ...
    solver: Any = ...
    refit: Any = ...
    intercept_scaling: Any = ...
    multi_class: Any = ...
    random_state: Any = ...
    l1_ratios: Any = ...
    def __init__(self, *, Cs: int = ..., fit_intercept: bool = ..., cv: Optional[Any] = ..., dual: bool = ..., penalty: str = ..., scoring: Optional[Any] = ..., solver: str = ..., tol: float = ..., max_iter: int = ..., class_weight: Optional[Any] = ..., n_jobs: Optional[Any] = ..., verbose: int = ..., refit: bool = ..., intercept_scaling: float = ..., multi_class: str = ..., random_state: Optional[Any] = ..., l1_ratios: Optional[Any] = ...) -> None: ...
    Cs_: Any = ...
    n_iter_: Any = ...
    scores_: Any = ...
    coefs_paths_: Any = ...
    C_: Any = ...
    l1_ratio_: Any = ...
    coef_: Any = ...
    intercept_: Any = ...
    l1_ratios_: Any = ...
    def fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...
    def score(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...
