from ._stochastic_gradient import BaseSGDClassifier as BaseSGDClassifier, BaseSGDRegressor as BaseSGDRegressor, DEFAULT_EPSILON as DEFAULT_EPSILON
from typing import Any, Optional

class PassiveAggressiveClassifier(BaseSGDClassifier):
    C: Any = ...
    loss: Any = ...
    def __init__(self, *, C: float = ..., fit_intercept: bool = ..., max_iter: int = ..., tol: float = ..., early_stopping: bool = ..., validation_fraction: float = ..., n_iter_no_change: int = ..., shuffle: bool = ..., verbose: int = ..., loss: str = ..., n_jobs: Optional[Any] = ..., random_state: Optional[Any] = ..., warm_start: bool = ..., class_weight: Optional[Any] = ..., average: bool = ...) -> None: ...
    def partial_fit(self, X: Any, y: Any, classes: Optional[Any] = ...): ...
    def fit(self, X: Any, y: Any, coef_init: Optional[Any] = ..., intercept_init: Optional[Any] = ...): ...

class PassiveAggressiveRegressor(BaseSGDRegressor):
    C: Any = ...
    loss: Any = ...
    def __init__(self, *, C: float = ..., fit_intercept: bool = ..., max_iter: int = ..., tol: float = ..., early_stopping: bool = ..., validation_fraction: float = ..., n_iter_no_change: int = ..., shuffle: bool = ..., verbose: int = ..., loss: str = ..., epsilon: Any = ..., random_state: Optional[Any] = ..., warm_start: bool = ..., average: bool = ...) -> None: ...
    def partial_fit(self, X: Any, y: Any): ...
    def fit(self, X: Any, y: Any, coef_init: Optional[Any] = ..., intercept_init: Optional[Any] = ...): ...
