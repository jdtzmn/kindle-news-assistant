from ..base import MultiOutputMixin as MultiOutputMixin, RegressorMixin as RegressorMixin, is_classifier as is_classifier
from ..exceptions import ConvergenceWarning as ConvergenceWarning
from ..metrics import check_scoring as check_scoring
from ..model_selection import GridSearchCV as GridSearchCV
from ..preprocessing import LabelBinarizer as LabelBinarizer
from ..utils import check_array as check_array, check_consistent_length as check_consistent_length, column_or_1d as column_or_1d, compute_sample_weight as compute_sample_weight
from ..utils.extmath import row_norms as row_norms, safe_sparse_dot as safe_sparse_dot
from ..utils.sparsefuncs import mean_variance_axis as mean_variance_axis
from ._base import LinearClassifierMixin as LinearClassifierMixin, LinearModel as LinearModel
from ._sag import sag_solver as sag_solver
from abc import ABCMeta, abstractmethod
from scipy import sparse
from typing import Any, Optional

def ridge_regression(X: Any, y: Any, alpha: Any, *, sample_weight: Optional[Any] = ..., solver: str = ..., max_iter: Optional[Any] = ..., tol: float = ..., verbose: int = ..., random_state: Optional[Any] = ..., return_n_iter: bool = ..., return_intercept: bool = ..., check_input: bool = ...): ...

class _BaseRidge(LinearModel, metaclass=ABCMeta):
    alpha: Any = ...
    fit_intercept: Any = ...
    normalize: Any = ...
    copy_X: Any = ...
    max_iter: Any = ...
    tol: Any = ...
    solver: Any = ...
    random_state: Any = ...
    @abstractmethod
    def __init__(self, alpha: float = ..., *, fit_intercept: bool = ..., normalize: bool = ..., copy_X: bool = ..., max_iter: Optional[Any] = ..., tol: float = ..., solver: str = ..., random_state: Optional[Any] = ...) -> Any: ...
    def fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...

class Ridge(MultiOutputMixin, RegressorMixin, _BaseRidge):
    def __init__(self, alpha: float = ..., *, fit_intercept: bool = ..., normalize: bool = ..., copy_X: bool = ..., max_iter: Optional[Any] = ..., tol: float = ..., solver: str = ..., random_state: Optional[Any] = ...) -> None: ...
    def fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...

class RidgeClassifier(LinearClassifierMixin, _BaseRidge):
    class_weight: Any = ...
    def __init__(self, alpha: float = ..., *, fit_intercept: bool = ..., normalize: bool = ..., copy_X: bool = ..., max_iter: Optional[Any] = ..., tol: float = ..., class_weight: Optional[Any] = ..., solver: str = ..., random_state: Optional[Any] = ...) -> None: ...
    def fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...
    @property
    def classes_(self): ...

class _X_CenterStackOp(sparse.linalg.LinearOperator):
    X: Any = ...
    X_mean: Any = ...
    sqrt_sw: Any = ...
    def __init__(self, X: Any, X_mean: Any, sqrt_sw: Any) -> None: ...

class _XT_CenterStackOp(sparse.linalg.LinearOperator):
    X: Any = ...
    X_mean: Any = ...
    sqrt_sw: Any = ...
    def __init__(self, X: Any, X_mean: Any, sqrt_sw: Any) -> None: ...

class _IdentityRegressor:
    def decision_function(self, y_predict: Any): ...
    def predict(self, y_predict: Any): ...

class _IdentityClassifier(LinearClassifierMixin):
    classes_: Any = ...
    def __init__(self, classes: Any) -> None: ...
    def decision_function(self, y_predict: Any): ...

class _RidgeGCV(LinearModel):
    alphas: Any = ...
    fit_intercept: Any = ...
    normalize: Any = ...
    scoring: Any = ...
    copy_X: Any = ...
    gcv_mode: Any = ...
    store_cv_values: Any = ...
    is_clf: Any = ...
    def __init__(self, alphas: Any = ..., *, fit_intercept: bool = ..., normalize: bool = ..., scoring: Optional[Any] = ..., copy_X: bool = ..., gcv_mode: Optional[Any] = ..., store_cv_values: bool = ..., is_clf: bool = ...) -> None: ...
    cv_values_: Any = ...
    alpha_: Any = ...
    best_score_: Any = ...
    dual_coef_: Any = ...
    coef_: Any = ...
    def fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...

class _BaseRidgeCV(LinearModel):
    alphas: Any = ...
    fit_intercept: Any = ...
    normalize: Any = ...
    scoring: Any = ...
    cv: Any = ...
    gcv_mode: Any = ...
    store_cv_values: Any = ...
    def __init__(self, alphas: Any = ..., *, fit_intercept: bool = ..., normalize: bool = ..., scoring: Optional[Any] = ..., cv: Optional[Any] = ..., gcv_mode: Optional[Any] = ..., store_cv_values: bool = ...) -> None: ...
    alpha_: Any = ...
    best_score_: Any = ...
    cv_values_: Any = ...
    coef_: Any = ...
    intercept_: Any = ...
    n_features_in_: Any = ...
    def fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...

class RidgeCV(MultiOutputMixin, RegressorMixin, _BaseRidgeCV): ...

class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):
    class_weight: Any = ...
    def __init__(self, alphas: Any = ..., *, fit_intercept: bool = ..., normalize: bool = ..., scoring: Optional[Any] = ..., cv: Optional[Any] = ..., class_weight: Optional[Any] = ..., store_cv_values: bool = ...) -> None: ...
    def fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...
    @property
    def classes_(self): ...
