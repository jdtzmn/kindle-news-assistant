from ..base import MultiOutputMixin as MultiOutputMixin, RegressorMixin as RegressorMixin
from ..model_selection import check_cv as check_cv
from ..utils import as_float_array as as_float_array, check_array as check_array
from ._base import LinearModel as LinearModel
from typing import Any, Optional

premature: str

def orthogonal_mp(X: Any, y: Any, *, n_nonzero_coefs: Optional[Any] = ..., tol: Optional[Any] = ..., precompute: bool = ..., copy_X: bool = ..., return_path: bool = ..., return_n_iter: bool = ...): ...
def orthogonal_mp_gram(Gram: Any, Xy: Any, *, n_nonzero_coefs: Optional[Any] = ..., tol: Optional[Any] = ..., norms_squared: Optional[Any] = ..., copy_Gram: bool = ..., copy_Xy: bool = ..., return_path: bool = ..., return_n_iter: bool = ...): ...

class OrthogonalMatchingPursuit(MultiOutputMixin, RegressorMixin, LinearModel):
    n_nonzero_coefs: Any = ...
    tol: Any = ...
    fit_intercept: Any = ...
    normalize: Any = ...
    precompute: Any = ...
    def __init__(self, *, n_nonzero_coefs: Optional[Any] = ..., tol: Optional[Any] = ..., fit_intercept: bool = ..., normalize: bool = ..., precompute: str = ...) -> None: ...
    n_nonzero_coefs_: Any = ...
    coef_: Any = ...
    def fit(self, X: Any, y: Any): ...

class OrthogonalMatchingPursuitCV(RegressorMixin, LinearModel):
    copy: Any = ...
    fit_intercept: Any = ...
    normalize: Any = ...
    max_iter: Any = ...
    cv: Any = ...
    n_jobs: Any = ...
    verbose: Any = ...
    def __init__(self, *, copy: bool = ..., fit_intercept: bool = ..., normalize: bool = ..., max_iter: Optional[Any] = ..., cv: Optional[Any] = ..., n_jobs: Optional[Any] = ..., verbose: bool = ...) -> None: ...
    n_nonzero_coefs_: Any = ...
    coef_: Any = ...
    intercept_: Any = ...
    n_iter_: Any = ...
    def fit(self, X: Any, y: Any): ...
