import _markupbase
from typing import Any

class SGMLParseError(RuntimeError): ...

class SGMLParser(_markupbase.ParserBase):
    entity_or_charref: Any = ...
    verbose: Any = ...
    def __init__(self, verbose: int = ...) -> None: ...
    rawdata: str = ...
    stack: Any = ...
    lasttag: str = ...
    nomoretags: int = ...
    literal: int = ...
    def reset(self) -> None: ...
    def setnomoretags(self) -> None: ...
    def setliteral(self, *args: Any) -> None: ...
    def feed(self, data: Any) -> None: ...
    def close(self) -> None: ...
    def error(self, message: Any) -> None: ...
    def goahead(self, end: Any) -> None: ...
    def parse_pi(self, i: Any): ...
    def get_starttag_text(self): ...
    def parse_starttag(self, i: Any): ...
    def parse_endtag(self, i: Any): ...
    def finish_shorttag(self, tag: Any, data: Any) -> None: ...
    def finish_starttag(self, tag: Any, attrs: Any): ...
    def finish_endtag(self, tag: Any) -> None: ...
    def handle_starttag(self, tag: Any, method: Any, attrs: Any) -> None: ...
    def handle_endtag(self, tag: Any, method: Any) -> None: ...
    def report_unbalanced(self, tag: Any) -> None: ...
    def convert_charref(self, name: Any): ...
    def convert_codepoint(self, codepoint: Any): ...
    def handle_charref(self, name: Any) -> None: ...
    entitydefs: Any = ...
    def convert_entityref(self, name: Any): ...
    def handle_entityref(self, name: Any) -> None: ...
    def handle_data(self, data: Any) -> None: ...
    def handle_comment(self, data: Any) -> None: ...
    def handle_decl(self, decl: Any) -> None: ...
    def handle_pi(self, data: Any) -> None: ...
    def unknown_starttag(self, tag: Any, attrs: Any) -> None: ...
    def unknown_endtag(self, tag: Any) -> None: ...
    def unknown_charref(self, ref: Any) -> None: ...
    def unknown_entityref(self, ref: Any) -> None: ...

class TestSGMLParser(SGMLParser):
    testdata: str = ...
    def __init__(self, verbose: int = ...) -> None: ...
    def handle_data(self, data: Any) -> None: ...
    def flush(self) -> None: ...
    def handle_comment(self, data: Any) -> None: ...
    def unknown_starttag(self, tag: Any, attrs: Any) -> None: ...
    def unknown_endtag(self, tag: Any) -> None: ...
    def unknown_entityref(self, ref: Any) -> None: ...
    def unknown_charref(self, ref: Any) -> None: ...
    def unknown_decl(self, data: Any) -> None: ...
    def close(self) -> None: ...
