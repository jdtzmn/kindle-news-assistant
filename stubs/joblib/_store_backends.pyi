from . import numpy_pickle as numpy_pickle
from .backports import concurrency_safe_rename as concurrency_safe_rename
from .disk import memstr_to_bytes as memstr_to_bytes, mkdirp as mkdirp, rm_subdirs as rm_subdirs
from abc import ABCMeta, abstractmethod
from collections import namedtuple
from typing import Any, Optional

CacheItemInfo = namedtuple('CacheItemInfo', 'path size last_access')

def concurrency_safe_write(object_to_write: Any, filename: Any, write_func: Any): ...

class StoreBackendBase(metaclass=ABCMeta):
    location: Any = ...
    @abstractmethod
    def create_location(self, location: Any) -> Any: ...
    @abstractmethod
    def clear_location(self, location: Any) -> Any: ...
    @abstractmethod
    def get_items(self) -> Any: ...
    @abstractmethod
    def configure(self, location: Any, verbose: int = ..., backend_options: Any = ...) -> Any: ...

class StoreBackendMixin:
    def load_item(self, path: Any, verbose: int = ..., msg: Optional[Any] = ...): ...
    def dump_item(self, path: Any, item: Any, verbose: int = ...) -> None: ...
    def clear_item(self, path: Any) -> None: ...
    def contains_item(self, path: Any): ...
    def get_item_info(self, path: Any): ...
    def get_metadata(self, path: Any): ...
    def store_metadata(self, path: Any, metadata: Any) -> None: ...
    def contains_path(self, path: Any): ...
    def clear_path(self, path: Any) -> None: ...
    def store_cached_func_code(self, path: Any, func_code: Optional[Any] = ...) -> None: ...
    def get_cached_func_code(self, path: Any): ...
    def get_cached_func_info(self, path: Any): ...
    def clear(self) -> None: ...
    def reduce_store_size(self, bytes_limit: Any) -> None: ...

class FileSystemStoreBackend(StoreBackendBase, StoreBackendMixin):
    def clear_location(self, location: Any) -> None: ...
    def create_location(self, location: Any) -> None: ...
    def get_items(self): ...
    location: Any = ...
    compress: Any = ...
    mmap_mode: Any = ...
    verbose: Any = ...
    def configure(self, location: Any, verbose: int = ..., backend_options: Optional[Any] = ...) -> None: ...
