from .backports import make_memmap as make_memmap
from .compressor import BZ2CompressorWrapper as BZ2CompressorWrapper, BinaryZlibFile as BinaryZlibFile, GzipCompressorWrapper as GzipCompressorWrapper, LZ4CompressorWrapper as LZ4CompressorWrapper, LZ4_NOT_INSTALLED_ERROR as LZ4_NOT_INSTALLED_ERROR, LZMACompressorWrapper as LZMACompressorWrapper, XZCompressorWrapper as XZCompressorWrapper, ZlibCompressorWrapper as ZlibCompressorWrapper, lz4 as lz4, register_compressor as register_compressor # type: ignore
from .numpy_pickle_compat import NDArrayWrapper as NDArrayWrapper, ZNDArrayWrapper as ZNDArrayWrapper, load_compatibility as load_compatibility
from .numpy_pickle_utils import BUFFER_SIZE as BUFFER_SIZE, Pickler as Pickler, Unpickler as Unpickler
from typing import Any, Optional, Union, Tuple

class NumpyArrayWrapper:
    subclass: Any = ...
    shape: Any = ...
    order: Any = ...
    dtype: Any = ...
    allow_mmap: Any = ...
    def __init__(self, subclass: Any, shape: Any, order: Any, dtype: Any, allow_mmap: bool = ...) -> None: ...
    def write_array(self, array: Any, pickler: Any) -> None: ...
    def read_array(self, unpickler: Any): ...
    def read_mmap(self, unpickler: Any): ...
    def read(self, unpickler: Any): ...

class NumpyPickler(Pickler):
    dispatch: Any = ...
    file_handle: Any = ...
    buffered: Any = ...
    np: Any = ...
    def __init__(self, fp: Any, protocol: Optional[Any] = ...) -> None: ...
    def save(self, obj: Any): ...

class NumpyUnpickler(Unpickler):
    dispatch: Any = ...
    mmap_mode: Any = ...
    file_handle: Any = ...
    filename: Any = ...
    compat_mode: bool = ...
    np: Any = ...
    def __init__(self, filename: Any, file_handle: Any, mmap_mode: Optional[Any] = ...) -> None: ...
    def load_build(self) -> None: ...

def dump(value: Any, filename: Any, compress: Union[int, Tuple[str, int]] = ..., protocol: Optional[Any] = ..., cache_size: Optional[Any] = ...): ...
def load_temporary_memmap(filename: Any, mmap_mode: Any, unlink_on_gc_collect: Any): ...
def load(filename: Any, mmap_mode: Optional[Any] = ...): ...
