from .backports import make_memmap as make_memmap
from .disk import delete_folder as delete_folder
from .externals.loky.backend import resource_tracker as resource_tracker
from .numpy_pickle import dump as dump, load as load, load_temporary_memmap as load_temporary_memmap
from typing import Any, Optional

WindowsError: Any
SYSTEM_SHARED_MEM_FS: str
SYSTEM_SHARED_MEM_FS_MIN_SIZE: Any
FOLDER_PERMISSIONS: Any
FILE_PERMISSIONS: Any
JOBLIB_MMAPS: Any

def add_maybe_unlink_finalizer(memmap: Any) -> None: ...
def unlink_file(filename: Any) -> None: ...

class _WeakArrayKeyMap:
    def __init__(self) -> None: ...
    def get(self, obj: Any): ...
    def set(self, obj: Any, value: Any) -> None: ...

def has_shareable_memory(a: Any): ...
def reduce_array_memmap_backward(a: Any): ...

class ArrayMemmapForwardReducer:
    verbose: Any = ...
    def __init__(self, max_nbytes: Any, temp_folder_resolver: Any, mmap_mode: Any, unlink_on_gc_collect: Any, verbose: int = ..., prewarm: bool = ...) -> None: ...
    def __reduce__(self): ...
    def __call__(self, a: Any): ...

def get_memmapping_reducers(forward_reducers: Optional[Any] = ..., backward_reducers: Optional[Any] = ..., temp_folder_resolver: Optional[Any] = ..., max_nbytes: float = ..., mmap_mode: str = ..., verbose: int = ..., prewarm: bool = ..., unlink_on_gc_collect: bool = ..., **kwargs: Any): ...

class TemporaryResourcesManager:
    def __init__(self, temp_folder_root: Optional[Any] = ..., context_id: Optional[Any] = ...) -> None: ...
    def set_current_context(self, context_id: Any) -> None: ...
    def register_new_context(self, context_id: Any) -> None: ...
    def resolve_temp_folder_name(self): ...
    def register_folder_finalizer(self, pool_subfolder: Any, context_id: Any) -> None: ...
