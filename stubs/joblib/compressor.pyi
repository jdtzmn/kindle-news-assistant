import io
from typing import Any, Optional

LZ4_NOT_INSTALLED_ERROR: str

def register_compressor(compressor_name: Any, compressor: Any, force: bool = ...) -> None: ...

class CompressorWrapper:
    fileobj_factory: Any = ...
    prefix: Any = ...
    extension: Any = ...
    def __init__(self, obj: Any, prefix: bytes = ..., extension: str = ...) -> None: ...
    def compressor_file(self, fileobj: Any, compresslevel: Optional[Any] = ...): ...
    def decompressor_file(self, fileobj: Any): ...

class BZ2CompressorWrapper(CompressorWrapper):
    prefix: Any = ...
    extension: str = ...
    fileobj_factory: Any = ...
    def __init__(self) -> None: ...
    def compressor_file(self, fileobj: Any, compresslevel: Optional[Any] = ...): ...
    def decompressor_file(self, fileobj: Any): ...

class LZMACompressorWrapper(CompressorWrapper):
    prefix: Any = ...
    extension: str = ...
    fileobj_factory: Any = ...
    def __init__(self) -> None: ...
    def compressor_file(self, fileobj: Any, compresslevel: Optional[Any] = ...): ...
    def decompressor_file(self, fileobj: Any): ...

class XZCompressorWrapper(LZMACompressorWrapper):
    prefix: Any = ...
    extension: str = ...

class LZ4CompressorWrapper(CompressorWrapper):
    prefix: Any = ...
    extension: str = ...
    fileobj_factory: Any = ...
    def __init__(self) -> None: ...
    def compressor_file(self, fileobj: Any, compresslevel: Optional[Any] = ...): ...
    def decompressor_file(self, fileobj: Any): ...

class BinaryZlibFile(io.BufferedIOBase):
    wbits: Any = ...
    compresslevel: Any = ...
    def __init__(self, filename: Any, mode: str = ..., compresslevel: int = ...) -> None: ...
    def close(self) -> None: ...
    @property
    def closed(self): ...
    def fileno(self): ...
    def seekable(self): ...
    def readable(self): ...
    def writable(self): ...
    def read(self, size: int = ...): ... # type: ignore
    def readinto(self, b: Any): ...
    def write(self, data: Any): ...
    def seek(self, offset: Any, whence: int = ...): ...
    def tell(self): ...

class ZlibCompressorWrapper(CompressorWrapper):
    def __init__(self) -> None: ...

class BinaryGzipFile(BinaryZlibFile):
    wbits: int = ...

class GzipCompressorWrapper(CompressorWrapper):
    def __init__(self) -> None: ...
