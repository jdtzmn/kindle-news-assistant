from .cloudpickle import CellType as CellType, DEFAULT_PROTOCOL as DEFAULT_PROTOCOL, PYPY as PYPY, builtin_code_type as builtin_code_type, cell_set as cell_set, dynamic_subimport as dynamic_subimport, parametrized_type_hint_getinitargs as parametrized_type_hint_getinitargs, subimport as subimport
from .compat import Pickler as Pickler, pickle as pickle # type: ignore
from typing import Any, Optional

def dump(obj: Any, file: Any, protocol: Optional[Any] = ..., buffer_callback: Optional[Any] = ...) -> None: ...
def dumps(obj: Any, protocol: Optional[Any] = ..., buffer_callback: Optional[Any] = ...): ...

load: Any
loads: Any

class CloudPickler(Pickler):
    dispatch_table: Any = ...
    def dump(self, obj: Any): ...
    dispatch: Any = ...
    globals_ref: Any = ...
    proto: Any = ...
    def __init__(self, file: Any, protocol: Optional[Any] = ..., buffer_callback: Optional[Any] = ...) -> None: ...
    def reducer_override(self, obj: Any): ...
    def __init__(self, file: Any, protocol: Optional[Any] = ...) -> None: ... # type: ignore
    def save_global(self, obj: Any, name: Optional[Any] = ..., pack: Any = ...): ...
    def save_function(self, obj: Any, name: Optional[Any] = ...): ...
    def save_pypy_builtin_func(self, obj: Any) -> None: ...
