from .process import LokyInitMainProcess as LokyInitMainProcess, LokyProcess as LokyProcess
from multiprocessing.context import BaseContext, assert_spawning as assert_spawning, get_spawning_popen as get_spawning_popen, set_spawning_popen as set_spawning_popen
from typing import Any, Optional

START_METHODS: Any
physical_cores_cache: Any

def get_context(method: Optional[Any] = ...): ...
def set_start_method(method: Any, force: bool = ...) -> None: ...
def get_start_method(): ...
def cpu_count(only_physical_cores: bool = ...): ...

class LokyContext(BaseContext):
    Process: Any = ...
    cpu_count: Any = ...
    def Queue(self, maxsize: int = ..., reducers: Optional[Any] = ...): ...
    def SimpleQueue(self, reducers: Optional[Any] = ...): ...
    def Semaphore(self, value: int = ...): ...
    def BoundedSemaphore(self, value: Any): ... # type: ignore
    def Lock(self): ...
    def RLock(self): ...
    def Condition(self, lock: Optional[Any] = ...): ...
    def Event(self): ...

class LokyInitMainContext(LokyContext):
    Process: Any = ...

ctx_loky: Any
