from collections import MutableMapping
from typing import Any, Optional

CUR_OS: Any
IS_WIN: Any
IS_NIX: Any
RE_ANSI: Any
WeakSet = set

class _OrderedDict(dict, MutableMapping):
    def __init__(self, *args: Any, **kwds: Any) -> None: ...
    def clear(self) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __reversed__(self): ...
    def popitem(self): ...
    def __reduce__(self): ...
    setdefault: Any = ...
    update: Any = ...
    pop: Any = ...
    keys: Any = ...
    values: Any = ...
    items: Any = ...
    def copy(self): ...
    @classmethod
    def fromkeys(cls, iterable: Any, value: Optional[Any] = ...): ...

class FormatReplace:
    replace: Any = ...
    format_called: int = ...
    def __init__(self, replace: str = ...) -> None: ...
    def __format__(self, _: Any): ...

class Comparable:
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class ObjectWrapper:
    def __getattr__(self, name: Any): ...
    def __setattr__(self, name: Any, value: Any): ...
    def wrapper_getattr(self, name: Any): ...
    def wrapper_setattr(self, name: Any, value: Any): ...
    def __init__(self, wrapped: Any) -> None: ...

class SimpleTextIOWrapper(ObjectWrapper):
    def __init__(self, wrapped: Any, encoding: Any) -> None: ...
    def write(self, s: Any): ...
    def __eq__(self, other: Any) -> Any: ...

class DisableOnWriteError(ObjectWrapper):
    @staticmethod
    def disable_on_exception(tqdm_instance: Any, func: Any): ...
    def __init__(self, wrapped: Any, tqdm_instance: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...

class CallbackIOWrapper(ObjectWrapper):
    def __init__(self, callback: Any, stream: Any, method: str = ...): ...

def disp_len(data: Any): ...
def disp_trim(data: Any, length: Any): ...
