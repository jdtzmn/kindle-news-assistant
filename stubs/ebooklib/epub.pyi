from ebooklib.utils import get_pages_for_items as get_pages_for_items, guess_type as guess_type, parse_html_string as parse_html_string, parse_string as parse_string
from typing import Any, Optional

VERSION: Any
NAMESPACES: Any
CONTAINER_PATH: str
CONTAINER_XML: str
NCX_XML: Any
NAV_XML: Any
CHAPTER_XML: Any
COVER_XML: Any
IMAGE_MEDIA_TYPES: Any

class Section:
    title: Any = ...
    href: Any = ...
    def __init__(self, title: Any, href: str = ...) -> None: ...

class Link:
    href: Any = ...
    title: Any = ...
    uid: Any = ...
    def __init__(self, href: Any, title: Any, uid: Optional[Any] = ...) -> None: ...

class EpubException(Exception):
    code: Any = ...
    msg: Any = ...
    def __init__(self, code: Any, msg: Any) -> None: ...

class EpubItem:
    id: Any = ...
    file_name: Any = ...
    media_type: Any = ...
    content: Any = ...
    is_linear: bool = ...
    manifest: Any = ...
    book: Any = ...
    def __init__(self, uid: Optional[Any] = ..., file_name: str = ..., media_type: str = ..., content: Any = ..., manifest: bool = ...) -> None: ...
    def get_id(self): ...
    def get_name(self): ...
    def get_type(self): ...
    def get_content(self, default: Any = ...): ...
    def set_content(self, content: Any) -> None: ...

class EpubNcx(EpubItem):
    def __init__(self, uid: str = ..., file_name: str = ...) -> None: ...

class EpubCover(EpubItem):
    def __init__(self, uid: str = ..., file_name: str = ...) -> None: ...
    def get_type(self): ...

class EpubHtml(EpubItem):
    title: Any = ...
    lang: Any = ...
    direction: Any = ...
    media_overlay: Any = ...
    media_duration: Any = ...
    links: Any = ...
    properties: Any = ...
    pages: Any = ...
    def __init__(self, uid: Optional[Any] = ..., file_name: str = ..., media_type: str = ..., content: Optional[Any] = ..., title: str = ..., lang: Optional[Any] = ..., direction: Optional[Any] = ..., media_overlay: Optional[Any] = ..., media_duration: Optional[Any] = ...) -> None: ...
    def is_chapter(self): ...
    def get_type(self): ...
    def set_language(self, lang: Any) -> None: ...
    def get_language(self): ...
    def add_link(self, **kwgs: Any) -> None: ...
    def get_links(self): ...
    def get_links_of_type(self, link_type: Any): ...
    def add_item(self, item: Any) -> None: ...
    def get_body_content(self): ...
    def get_content(self, default: Optional[Any] = ...): ...

class EpubCoverHtml(EpubHtml):
    image_name: Any = ...
    is_linear: bool = ...
    def __init__(self, uid: str = ..., file_name: str = ..., image_name: str = ..., title: str = ...) -> None: ...
    def is_chapter(self): ...
    content: Any = ...
    def get_content(self): ...

class EpubNav(EpubHtml):
    def __init__(self, uid: str = ..., file_name: str = ..., media_type: str = ...) -> None: ...
    def is_chapter(self): ...

class EpubImage(EpubItem):
    def __init__(self) -> None: ...
    def get_type(self): ...

class EpubSMIL(EpubItem):
    def __init__(self, uid: Optional[Any] = ..., file_name: str = ..., content: Optional[Any] = ...) -> None: ...
    def get_type(self): ...

class EpubBook:
    EPUB_VERSION: Any = ...
    def __init__(self) -> None: ...
    metadata: Any = ...
    items: Any = ...
    spine: Any = ...
    guide: Any = ...
    pages: Any = ...
    toc: Any = ...
    bindings: Any = ...
    IDENTIFIER_ID: str = ...
    FOLDER_NAME: str = ...
    title: str = ...
    language: str = ...
    direction: Any = ...
    templates: Any = ...
    prefixes: Any = ...
    namespaces: Any = ...
    def reset(self) -> None: ...
    uid: Any = ...
    def set_identifier(self, uid: Any) -> None: ...
    def set_title(self, title: Any) -> None: ...
    def set_language(self, lang: Any) -> None: ...
    def set_direction(self, direction: Any) -> None: ...
    def set_cover(self, file_name: Any, content: Any, create_page: bool = ...) -> None: ...
    def add_author(self, author: Any, file_as: Optional[Any] = ..., role: Optional[Any] = ..., uid: str = ...) -> None: ...
    def add_metadata(self, namespace: Any, name: Any, value: Any, others: Optional[Any] = ...) -> None: ...
    def get_metadata(self, namespace: Any, name: Any): ...
    def set_unique_metadata(self, namespace: Any, name: Any, value: Any, others: Optional[Any] = ...) -> None: ...
    def add_item(self, item: Any): ...
    def get_item_with_id(self, uid: Any): ...
    def get_item_with_href(self, href: Any): ...
    def get_items(self): ...
    def get_items_of_type(self, item_type: Any): ...
    def get_items_of_media_type(self, media_type: Any): ...
    def set_template(self, name: Any, value: Any) -> None: ...
    def get_template(self, name: Any): ...
    def add_prefix(self, name: Any, uri: Any) -> None: ...

class EpubWriter:
    DEFAULT_OPTIONS: Any = ...
    file_name: Any = ...
    book: Any = ...
    options: Any = ...
    def __init__(self, name: Any, book: Any, options: Optional[Any] = ...) -> None: ...
    def process(self) -> None: ...
    out: Any = ...
    def write(self) -> None: ...

class EpubReader:
    DEFAULT_OPTIONS: Any = ...
    file_name: Any = ...
    book: Any = ...
    zf: Any = ...
    opf_file: str = ...
    opf_dir: str = ...
    options: Any = ...
    def __init__(self, epub_file_name: Any, options: Optional[Any] = ...) -> None: ...
    def process(self) -> None: ...
    def load(self): ...
    def read_file(self, name: Any): ...

def write_epub(name: Any, book: Any, options: Optional[Any] = ...) -> None: ...
def read_epub(name: Any, options: Optional[Any] = ...): ...
